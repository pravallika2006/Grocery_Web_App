{"ast":null,"code":"import { EJSON, ObjectId } from 'bson';\nimport * as bson from 'bson';\nexport { bson as BSON };\nvar __spreadArray = undefined && undefined.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */function () {\n  function BrowserInfo(name, version, os) {\n    this.name = name;\n    this.version = version;\n    this.os = os;\n    this.type = 'browser';\n  }\n  return BrowserInfo;\n}();\nvar NodeInfo = /** @class */function () {\n  function NodeInfo(version) {\n    this.version = version;\n    this.type = 'node';\n    this.name = 'node';\n    this.os = process.platform;\n  }\n  return NodeInfo;\n}();\nvar SearchBotDeviceInfo = /** @class */function () {\n  function SearchBotDeviceInfo(name, version, os, bot) {\n    this.name = name;\n    this.version = version;\n    this.os = os;\n    this.bot = bot;\n    this.type = 'bot-device';\n  }\n  return SearchBotDeviceInfo;\n}();\nvar BotInfo = /** @class */function () {\n  function BotInfo() {\n    this.type = 'bot';\n    this.bot = true; // NOTE: deprecated test name instead\n    this.name = 'bot';\n    this.version = null;\n    this.os = null;\n  }\n  return BotInfo;\n}();\nvar ReactNativeInfo = /** @class */function () {\n  function ReactNativeInfo() {\n    this.type = 'react-native';\n    this.name = 'react-native';\n    this.version = null;\n    this.os = null;\n  }\n  return ReactNativeInfo;\n}();\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [['aol', /AOLShield\\/([0-9\\._]+)/], ['edge', /Edge\\/([0-9\\._]+)/], ['edge-ios', /EdgiOS\\/([0-9\\._]+)/], ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/], ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/], ['samsung', /SamsungBrowser\\/([0-9\\.]+)/], ['silk', /\\bSilk\\/([0-9._-]+)\\b/], ['miui', /MiuiBrowser\\/([0-9\\.]+)$/], ['beaker', /BeakerBrowser\\/([0-9\\.]+)/], ['edge-chromium', /EdgA?\\/([0-9\\.]+)/], ['chromium-webview', /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/], ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/], ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/], ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/], ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/], ['fxios', /FxiOS\\/([0-9\\.]+)/], ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/], ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/], ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/], ['pie', /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/], ['pie', /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/], ['netfront', /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/], ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/], ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/], ['ie', /MSIE\\s(7\\.0)/], ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/], ['android', /Android\\s([0-9\\.]+)/], ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/], ['safari', /Version\\/([0-9\\._]+).*Safari/], ['facebook', /FB[AS]V\\/([0-9\\.]+)/], ['instagram', /Instagram\\s([0-9\\.]+)/], ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/], ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/], ['curl', /^curl\\/([0-9\\.]+)$/], ['searchbot', SEARCHBOX_UA_REGEX]];\nvar operatingSystemRules = [['iOS', /iP(hone|od|ad)/], ['Android OS', /Android/], ['BlackBerry OS', /BlackBerry|BB10/], ['Windows Mobile', /IEMobile/], ['Amazon OS', /Kindle/], ['Windows 3.11', /Win16/], ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/], ['Windows 98', /(Windows 98)|(Win98)/], ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/], ['Windows XP', /(Windows NT 5.1)|(Windows XP)/], ['Windows Server 2003', /(Windows NT 5.2)/], ['Windows Vista', /(Windows NT 6.0)/], ['Windows 7', /(Windows NT 6.1)/], ['Windows 8', /(Windows NT 6.2)/], ['Windows 8.1', /(Windows NT 6.3)/], ['Windows 10', /(Windows NT 10.0)/], ['Windows ME', /Windows ME/], ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/], ['Open BSD', /OpenBSD/], ['Sun OS', /SunOS/], ['Chrome OS', /CrOS/], ['Linux', /(Linux)|(X11)/], ['Mac OS', /(Mac_PowerPC)|(Macintosh)/], ['QNX', /QNX/], ['BeOS', /BeOS/], ['OS/2', /OS\\/2/]];\nfunction detect(userAgent) {\n  if (!!userAgent) {\n    return parseUserAgent(userAgent);\n  }\n  if (typeof document === 'undefined' && typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return new ReactNativeInfo();\n  }\n  if (typeof navigator !== 'undefined') {\n    return parseUserAgent(navigator.userAgent);\n  }\n  return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n  // opted for using reduce here rather than Array#first with a regex.test call\n  // this is primarily because using the reduce we only perform the regex\n  // execution once rather than once for the test and for the exec again below\n  // probably something that needs to be benchmarked though\n  return ua !== '' && userAgentRules.reduce(function (matched, _a) {\n    var browser = _a[0],\n      regex = _a[1];\n    if (matched) {\n      return matched;\n    }\n    var uaMatch = regex.exec(ua);\n    return !!uaMatch && [browser, uaMatch];\n  }, false);\n}\nfunction parseUserAgent(ua) {\n  var matchedRule = matchUserAgent(ua);\n  if (!matchedRule) {\n    return null;\n  }\n  var name = matchedRule[0],\n    match = matchedRule[1];\n  if (name === 'searchbot') {\n    return new BotInfo();\n  }\n  // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n  var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n  if (versionParts) {\n    if (versionParts.length < REQUIRED_VERSION_PARTS) {\n      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n    }\n  } else {\n    versionParts = [];\n  }\n  var version = versionParts.join('.');\n  var os = detectOS(ua);\n  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n  if (searchBotMatch && searchBotMatch[1]) {\n    return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n  }\n  return new BrowserInfo(name, version, os);\n}\nfunction detectOS(ua) {\n  for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n    var _a = operatingSystemRules[ii],\n      os = _a[0],\n      regex = _a[1];\n    var match = regex.exec(ua);\n    if (match) {\n      return os;\n    }\n  }\n  return null;\n}\nfunction getNodeVersion() {\n  var isNode = typeof process !== 'undefined' && process.version;\n  return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n  var output = [];\n  for (var ii = 0; ii < count; ii++) {\n    output.push('0');\n  }\n  return output;\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2024 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// The sole purpose of this line is to verify types\n// Binding the function to avoid \"Failed to execute 'fetch' on 'Window': Illegal invocation\".\nconst fetch = globalThis.fetch.bind(globalThis);\n\n/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.6';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = (a => {\n  let tab = {};\n  a.forEach((c, i) => tab[c] = i);\n  return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function' ? Uint8Array.from.bind(Uint8Array) : it => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = src => src.replace(/=/g, '').replace(/[+\\/]/g, m0 => m0 == '+' ? '-' : '_');\nconst _tidyB64 = s => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = bin => {\n  // console.log('polyfilled');\n  let u32,\n    c0,\n    c1,\n    c2,\n    asc = '';\n  const pad = bin.length % 3;\n  for (let i = 0; i < bin.length;) {\n    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError('invalid character found');\n    u32 = c0 << 16 | c1 << 8 | c2;\n    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];\n  }\n  return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? bin => btoa(bin) : _hasBuffer ? bin => Buffer.from(bin, 'binary').toString('base64') : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer ? u8a => Buffer.from(u8a).toString('base64') : u8a => {\n  // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n  const maxargs = 0x1000;\n  let strs = [];\n  for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n  }\n  return _btoa(strs.join(''));\n};\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = c => {\n  if (c.length < 2) {\n    var cc = c.charCodeAt(0);\n    return cc < 0x80 ? c : cc < 0x800 ? _fromCC(0xc0 | cc >>> 6) + _fromCC(0x80 | cc & 0x3f) : _fromCC(0xe0 | cc >>> 12 & 0x0f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  } else {\n    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);\n    return _fromCC(0xf0 | cc >>> 18 & 0x07) + _fromCC(0x80 | cc >>> 12 & 0x3f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = u => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer ? s => Buffer.from(s, 'utf8').toString('base64') : _TE ? s => _fromUint8Array(_TE.encode(s)) : s => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = src => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = cccc => {\n  switch (cccc.length) {\n    case 4:\n      var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),\n        offset = cp - 0x10000;\n      return _fromCC((offset >>> 10) + 0xD800) + _fromCC((offset & 0x3FF) + 0xDC00);\n    case 3:\n      return _fromCC((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));\n    default:\n      return _fromCC((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));\n  }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = b => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = asc => {\n  // console.log('polyfilled');\n  asc = asc.replace(/\\s+/g, '');\n  if (!b64re.test(asc)) throw new TypeError('malformed base64.');\n  asc += '=='.slice(2 - (asc.length & 3));\n  let u24,\n    bin = '',\n    r1,\n    r2;\n  for (let i = 0; i < asc.length;) {\n    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);\n    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n  }\n  return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? asc => atob(_tidyB64(asc)) : _hasBuffer ? asc => Buffer.from(asc, 'base64').toString('binary') : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer ? a => _U8Afrom(Buffer.from(a, 'base64')) : a => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = a => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer ? a => Buffer.from(a, 'base64').toString('utf8') : _TD ? a => _TD.decode(_toUint8Array(a)) : a => btou(_atob(a));\nconst _unURI = a => _tidyB64(a.replace(/[-_]/g, m0 => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = src => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = src => {\n  if (typeof src !== 'string') return false;\n  const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n  return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = v => {\n  return {\n    value: v,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n  _add('fromBase64', function () {\n    return decode(this);\n  });\n  _add('toBase64', function (urlsafe) {\n    return encode(this, urlsafe);\n  });\n  _add('toBase64URI', function () {\n    return encode(this, true);\n  });\n  _add('toBase64URL', function () {\n    return encode(this, true);\n  });\n  _add('toUint8Array', function () {\n    return toUint8Array(this);\n  });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n  _add('toBase64', function (urlsafe) {\n    return fromUint8Array(this, urlsafe);\n  });\n  _add('toBase64URI', function () {\n    return fromUint8Array(this, true);\n  });\n  _add('toBase64URL', function () {\n    return fromUint8Array(this, true);\n  });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n  extendString();\n  extendUint8Array();\n};\nconst gBase64 = {\n  version: version,\n  VERSION: VERSION,\n  atob: _atob,\n  atobPolyfill: atobPolyfill,\n  btoa: _btoa,\n  btoaPolyfill: btoaPolyfill,\n  fromBase64: decode,\n  toBase64: encode,\n  encode: encode,\n  encodeURI: encodeURI,\n  encodeURL: encodeURI,\n  utob: utob,\n  btou: btou,\n  decode: decode,\n  isValid: isValid,\n  fromUint8Array: fromUint8Array,\n  toUint8Array: toUint8Array,\n  extendString: extendString,\n  extendUint8Array: extendUint8Array,\n  extendBuiltins: extendBuiltins\n};\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst SERIALIZATION_OPTIONS = {\n  relaxed: false // Ensure Canonical mode\n};\n/**\n * Serialize an object containing BSON types into extended-JSON.\n * @param obj The object containing BSON types.\n * @returns The document in extended-JSON format.\n */\nfunction serialize(obj) {\n  return EJSON.serialize(obj, SERIALIZATION_OPTIONS);\n}\n/**\n * De-serialize an object or an array of object from extended-JSON into an object or an array of object with BSON types.\n * @param obj The object or array of objects in extended-JSON format.\n * @returns The object or array of objects with inflated BSON types.\n */\nfunction deserialize(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(doc => EJSON.deserialize(doc));\n  } else {\n    return EJSON.deserialize(obj);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * The type of a user.\n */\nvar UserType$1;\n(function (UserType) {\n  /**\n   * A normal end-user created this user.\n   */\n  UserType[\"Normal\"] = \"normal\";\n  /**\n   * The user was created by the server.\n   */\n  UserType[\"Server\"] = \"server\";\n})(UserType$1 || (UserType$1 = {}));\n/** @ignore */\nvar DataKey;\n(function (DataKey) {\n  /** @ignore */\n  DataKey[\"NAME\"] = \"name\";\n  /** @ignore */\n  DataKey[\"EMAIL\"] = \"email\";\n  /** @ignore */\n  DataKey[\"PICTURE\"] = \"picture\";\n  /** @ignore */\n  DataKey[\"FIRST_NAME\"] = \"first_name\";\n  /** @ignore */\n  DataKey[\"LAST_NAME\"] = \"last_name\";\n  /** @ignore */\n  DataKey[\"GENDER\"] = \"gender\";\n  /** @ignore */\n  DataKey[\"BIRTHDAY\"] = \"birthday\";\n  /** @ignore */\n  DataKey[\"MIN_AGE\"] = \"min_age\";\n  /** @ignore */\n  DataKey[\"MAX_AGE\"] = \"max_age\";\n})(DataKey || (DataKey = {}));\nconst DATA_MAPPING = {\n  [DataKey.NAME]: \"name\",\n  [DataKey.EMAIL]: \"email\",\n  [DataKey.PICTURE]: \"pictureUrl\",\n  [DataKey.FIRST_NAME]: \"firstName\",\n  [DataKey.LAST_NAME]: \"lastName\",\n  [DataKey.GENDER]: \"gender\",\n  [DataKey.BIRTHDAY]: \"birthday\",\n  [DataKey.MIN_AGE]: \"minAge\",\n  [DataKey.MAX_AGE]: \"maxAge\"\n};\n/** @inheritdoc */\nclass UserProfile {\n  /**\n   * @param response The response of a call fetching the users profile.\n   */\n  constructor(response) {\n    /** @ignore */\n    this.type = UserType$1.Normal;\n    /** @ignore */\n    this.identities = [];\n    if (typeof response === \"object\" && response !== null) {\n      const {\n        type,\n        identities,\n        data\n      } = response;\n      if (typeof type === \"string\") {\n        this.type = type;\n      } else {\n        throw new Error(\"Expected 'type' in the response body\");\n      }\n      if (Array.isArray(identities)) {\n        this.identities = identities.map(identity => {\n          const {\n            id,\n            provider_type: providerType\n          } = identity;\n          return {\n            id,\n            providerType\n          };\n        });\n      } else {\n        throw new Error(\"Expected 'identities' in the response body\");\n      }\n      if (typeof data === \"object\" && data !== null) {\n        const mappedData = Object.fromEntries(Object.entries(data).map(([key, value]) => {\n          if (key in DATA_MAPPING) {\n            // Translate any known data field to its JS idiomatic alias\n            return [DATA_MAPPING[key], value];\n          } else {\n            // Pass through any other values\n            return [key, value];\n          }\n        }));\n        // We can use `any` since we trust the user supplies the correct type\n        this.data = deserialize(mappedData);\n      } else {\n        throw new Error(\"Expected 'data' in the response body\");\n      }\n    } else {\n      this.data = {};\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * A `Storage` which will prefix a key part to every operation.\n */\nclass PrefixedStorage {\n  /**\n   * Construct a `Storage` which will prefix a key part to every operation.\n   * @param storage The underlying storage to use for operations.\n   * @param keyPart The part of the key to prefix when performing operations.\n   */\n  constructor(storage, keyPart) {\n    this.storage = storage;\n    this.keyPart = keyPart;\n  }\n  /** @inheritdoc */\n  get(key) {\n    return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n  }\n  /** @inheritdoc */\n  set(key, value) {\n    return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);\n  }\n  /** @inheritdoc */\n  remove(key) {\n    return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n  }\n  /** @inheritdoc */\n  prefix(keyPart) {\n    return new PrefixedStorage(this, keyPart);\n  }\n  /** @inheritdoc */\n  clear(prefix = \"\") {\n    return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);\n  }\n  /** @inheritdoc */\n  addListener(listener) {\n    return this.storage.addListener(listener);\n  }\n  /** @inheritdoc */\n  removeListener(listener) {\n    return this.storage.addListener(listener);\n  }\n}\n/**\n * The string separating two parts.\n */\nPrefixedStorage.PART_SEPARATOR = \":\";\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * In-memory storage that will not be persisted.\n */\nclass MemoryStorage {\n  constructor() {\n    /**\n     * Internal state of the storage.\n     */\n    this.storage = {};\n    /**\n     * A set of listners.\n     */\n    this.listeners = new Set();\n  }\n  /** @inheritdoc */\n  get(key) {\n    if (key in this.storage) {\n      return this.storage[key];\n    } else {\n      return null;\n    }\n  }\n  /** @inheritdoc */\n  set(key, value) {\n    this.storage[key] = value;\n    // Fire the listeners\n    this.fireListeners();\n  }\n  /** @inheritdoc */\n  remove(key) {\n    delete this.storage[key];\n    // Fire the listeners\n    this.fireListeners();\n  }\n  /** @inheritdoc */\n  prefix(keyPart) {\n    return new PrefixedStorage(this, keyPart);\n  }\n  /** @inheritdoc */\n  clear(prefix) {\n    // Iterate all keys and delete their values if they have a matching prefix\n    for (const key of Object.keys(this.storage)) {\n      if (!prefix || key.startsWith(prefix)) {\n        delete this.storage[key];\n      }\n    }\n    // Fire the listeners\n    this.fireListeners();\n  }\n  /** @inheritdoc */\n  addListener(listener) {\n    this.listeners.add(listener);\n  }\n  /** @inheritdoc */\n  removeListener(listener) {\n    this.listeners.delete(listener);\n  }\n  /**\n   * Tell the listeners that a change occurred.\n   */\n  fireListeners() {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst ACCESS_TOKEN_STORAGE_KEY = \"accessToken\";\nconst REFRESH_TOKEN_STORAGE_KEY = \"refreshToken\";\nconst PROFILE_STORAGE_KEY = \"profile\";\nconst PROVIDER_TYPE_STORAGE_KEY = \"providerType\";\n/**\n * Storage specific to the app.\n */\nclass UserStorage extends PrefixedStorage {\n  /**\n   * Construct a storage for a `User`.\n   * @param storage The underlying storage to wrap.\n   * @param userId The id of the user.\n   */\n  constructor(storage, userId) {\n    super(storage, `user(${userId})`);\n  }\n  /**\n   * Get the access token from storage.\n   * @returns Access token (null if unknown).\n   */\n  get accessToken() {\n    return this.get(ACCESS_TOKEN_STORAGE_KEY);\n  }\n  /**\n   * Set the access token in storage.\n   * @param value Access token (null if unknown).\n   */\n  set accessToken(value) {\n    if (value === null) {\n      this.remove(ACCESS_TOKEN_STORAGE_KEY);\n    } else {\n      this.set(ACCESS_TOKEN_STORAGE_KEY, value);\n    }\n  }\n  /**\n   * Get the refresh token from storage.\n   * @returns Refresh token (null if unknown and user is logged out).\n   */\n  get refreshToken() {\n    return this.get(REFRESH_TOKEN_STORAGE_KEY);\n  }\n  /**\n   * Set the refresh token in storage.\n   * @param value Refresh token (null if unknown and user is logged out).\n   */\n  set refreshToken(value) {\n    if (value === null) {\n      this.remove(REFRESH_TOKEN_STORAGE_KEY);\n    } else {\n      this.set(REFRESH_TOKEN_STORAGE_KEY, value);\n    }\n  }\n  /**\n   * Get the user profile from storage.\n   * @returns User profile (undefined if its unknown).\n   */\n  get profile() {\n    const value = this.get(PROFILE_STORAGE_KEY);\n    if (value) {\n      const profile = new UserProfile();\n      // Patch in the values\n      Object.assign(profile, JSON.parse(value));\n      return profile;\n    }\n  }\n  /**\n   * Set the user profile in storage.\n   * @param value User profile (undefined if its unknown).\n   */\n  set profile(value) {\n    if (value) {\n      this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));\n    } else {\n      this.remove(PROFILE_STORAGE_KEY);\n    }\n  }\n  /**\n   * Get the type of authentication provider used to authenticate\n   * @returns User profile (undefined if its unknown).\n   */\n  get providerType() {\n    const value = this.get(PROVIDER_TYPE_STORAGE_KEY);\n    if (value) {\n      return value;\n    }\n  }\n  /**\n   * Set the type of authentication provider used to authenticate\n   * @param value Type of authentication provider.\n   */\n  set providerType(value) {\n    if (value) {\n      this.set(PROVIDER_TYPE_STORAGE_KEY, value);\n    } else {\n      this.remove(PROVIDER_TYPE_STORAGE_KEY);\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * @param obj The object to remove keys (and undefined values from)\n * @returns A new object without the keys where the value is undefined.\n */\nfunction removeKeysWithUndefinedValues(obj) {\n  return Object.fromEntries(Object.entries(obj).filter(entry => typeof entry[1] !== \"undefined\"));\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Generate a random sequence of characters.\n * @param length The length of the string.\n * @param alphabet The alphabet of characters to pick from.\n * @returns A string of characters picked randomly from `alphabet`.\n */\nfunction generateRandomString(length, alphabet) {\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n  return result;\n}\n/**\n * Encode an object mapping from string to string, into a query string to be appended a URL.\n * @param params The parameters to include in the string.\n * @param prefixed Should the \"?\" prefix be added if values exists?\n * @returns A URL encoded representation of the parameters (omitting a \"?\" prefix).\n */\nfunction encodeQueryString(params, prefixed = true) {\n  // Filter out undefined values\n  const cleanedParams = removeKeysWithUndefinedValues(params);\n  // Determine if a prefixed \"?\" is appropreate\n  const prefix = prefixed && Object.keys(cleanedParams).length > 0 ? \"?\" : \"\";\n  // Transform keys and values to a query string\n  return prefix + Object.entries(cleanedParams).map(([k, v]) => `${k}=${encodeURIComponent(v)}`).join(\"&\");\n}\n/**\n * Decodes a query string into an object.\n * @param str The query string to decode.\n * @returns The decoded query string.\n */\nfunction decodeQueryString(str) {\n  const cleanStr = str[0] === \"?\" ? str.substr(1) : str;\n  return Object.fromEntries(cleanStr.split(\"&\").filter(s => s.length > 0).map(kvp => kvp.split(\"=\")).map(([k, v]) => [k, decodeURIComponent(v)]));\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * A list of names that functions cannot have to be callable through the functions proxy.\n */\nconst RESERVED_NAMES = [\"inspect\", \"callFunction\", \"callFunctionStreaming\",\n// Methods defined on the Object.prototype might be \"typeof probed\" and called by libraries and runtime environments.\n...Object.getOwnPropertyNames(Object.prototype)];\n/**\n * Remove the key for any fields with undefined values.\n * @param args The arguments to clean.\n * @returns The cleaned arguments.\n */\nfunction cleanArgs(args) {\n  for (const arg of args) {\n    if (typeof arg === \"object\" && arg) {\n      for (const [key, value] of Object.entries(arg)) {\n        if (value === undefined) {\n          delete arg[key];\n        }\n      }\n    }\n  }\n  return args;\n}\n/**\n * Remove keys for any undefined values and serialize to EJSON.\n * @param args The arguments to clean and serialize.\n * @returns The cleaned and serialized arguments.\n */\nfunction cleanArgsAndSerialize(args) {\n  const cleaned = cleanArgs(args);\n  return cleaned.map(arg => typeof arg === \"object\" ? serialize(arg) : arg);\n}\n/**\n * Defines how functions are called.\n */\nclass FunctionsFactory {\n  /**\n   * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.\n   * @param fetcher The underlying fetcher to use when requesting.\n   * @param config Additional configuration parameters.\n   * @returns The newly created factory of functions.\n   */\n  static create(fetcher, config = {}) {\n    // Create a proxy, wrapping a simple object returning methods that calls functions\n    // TODO: Lazily fetch available functions and return these from the ownKeys() trap\n    const factory = new FunctionsFactory(fetcher, config);\n    // Wrap the factory in a proxy that calls the internal call method\n    return new Proxy(factory, {\n      get(target, p, receiver) {\n        if (typeof p === \"string\" && RESERVED_NAMES.indexOf(p) === -1) {\n          return target.callFunction.bind(target, p);\n        } else {\n          const prop = Reflect.get(target, p, receiver);\n          return typeof prop === \"function\" ? prop.bind(target) : prop;\n        }\n      }\n    });\n  }\n  /**\n   * @param fetcher The underlying fetcher to use when sending requests.\n   * @param config Additional configuration parameters.\n   */\n  constructor(fetcher, config = {}) {\n    this.fetcher = fetcher;\n    this.serviceName = config.serviceName;\n    this.argsTransformation = config.argsTransformation || cleanArgsAndSerialize;\n  }\n  /**\n   * Call a remote function by it's name.\n   * @param name Name of the remote function.\n   * @param args Arguments to pass to the remote function.\n   * @returns A promise of the value returned when executing the remote function.\n   */\n  async callFunction(name, ...args) {\n    // See https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/sdk/src/services/internal/CoreStitchServiceClientImpl.ts\n    const body = {\n      name,\n      arguments: this.argsTransformation ? this.argsTransformation(args) : args\n    };\n    if (this.serviceName) {\n      body.service = this.serviceName;\n    }\n    const appRoute = this.fetcher.appRoute;\n    return this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.functionsCall().path,\n      body\n    });\n  }\n  /**\n   * Call a remote function by it's name.\n   * @param name Name of the remote function.\n   * @param args Arguments to pass to the remote function.\n   * @returns A promise of the value returned when executing the remote function.\n   */\n  callFunctionStreaming(name, ...args) {\n    const body = {\n      name,\n      arguments: this.argsTransformation ? this.argsTransformation(args) : args\n    };\n    if (this.serviceName) {\n      body.service = this.serviceName;\n    }\n    const appRoute = this.fetcher.appRoute;\n    const qs = encodeQueryString({\n      [\"baas_request\"]: gBase64.encode(JSON.stringify(body))\n    });\n    return this.fetcher.fetchStream({\n      method: \"GET\",\n      path: appRoute.functionsCall().path + qs\n    });\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/** @inheritdoc */\nclass EmailPasswordAuth {\n  /**\n   * Construct an interface to the email / password authentication provider.\n   * @param fetcher The underlying fetcher used to request the services.\n   * @param providerName Optional custom name of the authentication provider.\n   */\n  constructor(fetcher, providerName = \"local-userpass\") {\n    this.fetcher = fetcher;\n    this.providerName = providerName;\n  }\n  /** @inheritdoc */\n  async registerUser(details) {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).register().path,\n      body: details\n    });\n  }\n  /** @inheritdoc */\n  async confirmUser(details) {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).confirm().path,\n      body: details\n    });\n  }\n  /** @inheritdoc */\n  async resendConfirmationEmail(details) {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).confirmSend().path,\n      body: details\n    });\n  }\n  /** @inheritdoc */\n  async retryCustomConfirmation(details) {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).confirmCall().path,\n      body: details\n    });\n  }\n  /** @inheritdoc */\n  async resetPassword(details) {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).reset().path,\n      body: details\n    });\n  }\n  /** @inheritdoc */\n  async sendResetPasswordEmail(details) {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).resetSend().path,\n      body: details\n    });\n  }\n  /** @inheritdoc */\n  async callResetPasswordFunction(details, ...args) {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).resetCall().path,\n      body: {\n        ...details,\n        arguments: args\n      }\n    });\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * @returns The base api route.\n */\nfunction api() {\n  return {\n    path: \"/api/client/v2.0\",\n    /**\n     * @param appId The id of the app.\n     * @returns The URL of the app endpoint.\n     */\n    app(appId) {\n      return {\n        path: this.path + `/app/${appId}`,\n        /**\n         * @returns The URL of the app location endpoint.\n         */\n        location() {\n          return {\n            path: this.path + \"/location\"\n          };\n        },\n        /**\n         * @param providerName The name of the provider.\n         * @returns The app url concatinated with the /auth/providers/{providerName}\n         */\n        authProvider(providerName) {\n          return {\n            path: this.path + `/auth/providers/${providerName}`,\n            /**\n             * @returns Get the URL of an authentication provider.\n             */\n            login() {\n              return {\n                path: this.path + \"/login\"\n              };\n            }\n          };\n        },\n        /**\n         * @param providerName The name of the provider.\n         * @returns The app url concatinated with the /auth/providers/{providerName}\n         */\n        emailPasswordAuth(providerName) {\n          const authProviderRoutes = this.authProvider(providerName);\n          return {\n            ...authProviderRoutes,\n            register() {\n              return {\n                path: this.path + \"/register\"\n              };\n            },\n            confirm() {\n              return {\n                path: this.path + \"/confirm\"\n              };\n            },\n            confirmSend() {\n              return {\n                path: this.path + \"/confirm/send\"\n              };\n            },\n            confirmCall() {\n              return {\n                path: this.path + \"/confirm/call\"\n              };\n            },\n            reset() {\n              return {\n                path: this.path + \"/reset\"\n              };\n            },\n            resetSend() {\n              return {\n                path: this.path + \"/reset/send\"\n              };\n            },\n            resetCall() {\n              return {\n                path: this.path + \"/reset/call\"\n              };\n            }\n          };\n        },\n        functionsCall() {\n          return {\n            path: this.path + \"/functions/call\"\n          };\n        }\n      };\n    },\n    auth() {\n      return {\n        path: this.path + \"/auth\",\n        apiKeys() {\n          return {\n            path: this.path + \"/api_keys\",\n            key(id) {\n              return {\n                path: this.path + `/${id}`,\n                enable() {\n                  return {\n                    path: this.path + \"/enable\"\n                  };\n                },\n                disable() {\n                  return {\n                    path: this.path + \"/disable\"\n                  };\n                }\n              };\n            }\n          };\n        },\n        profile() {\n          return {\n            path: this.path + \"/profile\"\n          };\n        },\n        session() {\n          return {\n            path: this.path + \"/session\"\n          };\n        },\n        delete() {\n          return {\n            path: this.path + \"/delete\"\n          };\n        }\n      };\n    }\n  };\n}\nvar routes = {\n  api\n};\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/** @inheritdoc */\nclass ApiKeyAuth {\n  /**\n   * Construct an interface to the API-key authentication provider.\n   * @param fetcher The fetcher used to send requests to services.\n   */\n  constructor(fetcher) {\n    this.fetcher = fetcher;\n  }\n  /** @inheritdoc */\n  create(name) {\n    return this.fetcher.fetchJSON({\n      method: \"POST\",\n      body: {\n        name\n      },\n      path: routes.api().auth().apiKeys().path,\n      tokenType: \"refresh\"\n    });\n  }\n  /** @inheritdoc */\n  fetch(keyId) {\n    return this.fetcher.fetchJSON({\n      method: \"GET\",\n      path: routes.api().auth().apiKeys().key(keyId).path,\n      tokenType: \"refresh\"\n    });\n  }\n  /** @inheritdoc */\n  fetchAll() {\n    return this.fetcher.fetchJSON({\n      method: \"GET\",\n      tokenType: \"refresh\",\n      path: routes.api().auth().apiKeys().path\n    });\n  }\n  /** @inheritdoc */\n  async delete(keyId) {\n    await this.fetcher.fetchJSON({\n      method: \"DELETE\",\n      path: routes.api().auth().apiKeys().key(keyId).path,\n      tokenType: \"refresh\"\n    });\n  }\n  /** @inheritdoc */\n  async enable(keyId) {\n    await this.fetcher.fetchJSON({\n      method: \"PUT\",\n      path: routes.api().auth().apiKeys().key(keyId).enable().path,\n      tokenType: \"refresh\"\n    });\n  }\n  /** @inheritdoc */\n  async disable(keyId) {\n    await this.fetcher.fetchJSON({\n      method: \"PUT\",\n      path: routes.api().auth().apiKeys().key(keyId).disable().path,\n      tokenType: \"refresh\"\n    });\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nlet environment$1 = null;\n/**\n * Set the environment of execution.\n * Note: This should be called as the first thing before executing any code which calls getEnvironment()\n * @param e An object containing environment specific implementations.\n */\nfunction setEnvironment(e) {\n  environment$1 = e;\n}\n/**\n * Get the environment of execution.\n * @returns An object containing environment specific implementations.\n */\nfunction getEnvironment() {\n  if (environment$1) {\n    return environment$1;\n  } else {\n    throw new Error(\"Cannot get environment before it's set\");\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * An error occured during the parsing of a watch stream.\n */\nclass WatchError extends Error {\n  constructor({\n    message,\n    code\n  }) {\n    super(message);\n    /**\n     * The name of this type of error\n     */\n    this.name = \"WatchError\";\n    this.code = code;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// NOTE: this is a fully processed event, not a single \"data: foo\" line!\n/**\n * The state of a WatchStream.\n */\nvar WatchStreamState;\n(function (WatchStreamState) {\n  /**\n   * Need to call one of the feed functions.\n   */\n  WatchStreamState[\"NEED_DATA\"] = \"NEED_DATA\";\n  /**\n   * Call nextEvent() to consume an event.\n   */\n  WatchStreamState[\"HAVE_EVENT\"] = \"HAVE_EVENT\";\n  /**\n   * Call error().\n   */\n  WatchStreamState[\"HAVE_ERROR\"] = \"HAVE_ERROR\";\n})(WatchStreamState || (WatchStreamState = {}));\n/**\n * Represents a stream of events\n */\nclass WatchStream {\n  constructor() {\n    this._state = WatchStreamState.NEED_DATA;\n    this._error = null;\n    // Used by feedBuffer to construct lines\n    this._textDecoder = new (getEnvironment().TextDecoder)();\n    this._buffer = \"\";\n    this._bufferOffset = 0;\n    // Used by feedLine for building the next SSE\n    this._eventType = \"\";\n    this._dataBuffer = \"\";\n  }\n  // Call these when you have data, in whatever shape is easiest for your SDK to get.\n  // Pick one, mixing and matching on a single instance isn't supported.\n  // These can only be called in NEED_DATA state, which is the initial state.\n  feedBuffer(buffer) {\n    this.assertState(WatchStreamState.NEED_DATA);\n    this._buffer += this._textDecoder.decode(buffer, {\n      stream: true\n    });\n    this.advanceBufferState();\n  }\n  feedLine(line) {\n    this.assertState(WatchStreamState.NEED_DATA);\n    // This is an implementation of the algorithm described at\n    // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation.\n    // Currently the server does not use id or retry lines, so that processing isn't implemented.\n    // ignore trailing LF if not removed by SDK.\n    if (line.endsWith(\"\\n\")) line = line.substr(0, line.length - 1);\n    // ignore trailing CR from CRLF\n    if (line.endsWith(\"\\r\")) line = line.substr(0, line.length - 1);\n    if (line.length === 0) {\n      // This is the \"dispatch the event\" portion of the algorithm.\n      if (this._dataBuffer.length === 0) {\n        this._eventType = \"\";\n        return;\n      }\n      if (this._dataBuffer.endsWith(\"\\n\")) this._dataBuffer = this._dataBuffer.substr(0, this._dataBuffer.length - 1);\n      this.feedSse({\n        data: this._dataBuffer,\n        eventType: this._eventType\n      });\n      this._dataBuffer = \"\";\n      this._eventType = \"\";\n    }\n    if (line[0] === \":\") return;\n    const colon = line.indexOf(\":\");\n    const field = line.substr(0, colon);\n    let value = colon === -1 ? \"\" : line.substr(colon + 1);\n    if (value.startsWith(\" \")) value = value.substr(1);\n    if (field === \"event\") {\n      this._eventType = value;\n    } else if (field === \"data\") {\n      this._dataBuffer += value;\n      this._dataBuffer += \"\\n\";\n    } else ;\n  }\n  feedSse(sse) {\n    this.assertState(WatchStreamState.NEED_DATA);\n    const firstPercentIndex = sse.data.indexOf(\"%\");\n    if (firstPercentIndex !== -1) {\n      // For some reason, the stich server decided to add percent-encoding for '%', '\\n', and '\\r' to its\n      // event-stream replies. But it isn't real urlencoding, since most characters pass through, so we can't use\n      // uri_percent_decode() here.\n      let buffer = \"\";\n      let start = 0;\n      for (let percentIndex = firstPercentIndex; percentIndex !== -1; percentIndex = sse.data.indexOf(\"%\", start)) {\n        buffer += sse.data.substr(start, percentIndex - start);\n        const encoded = sse.data.substr(percentIndex, 3); // may be smaller than 3 if string ends with %\n        if (encoded === \"%25\") {\n          buffer += \"%\";\n        } else if (encoded === \"%0A\") {\n          buffer += \"\\x0A\"; // '\\n'\n        } else if (encoded === \"%0D\") {\n          buffer += \"\\x0D\"; // '\\r'\n        } else {\n          buffer += encoded; // propagate as-is\n        }\n        start = percentIndex + encoded.length;\n      }\n      // Advance the buffer with the last part\n      buffer += sse.data.substr(start);\n      sse.data = buffer;\n    }\n    if (!sse.eventType || sse.eventType === \"message\") {\n      try {\n        const parsed = EJSON.parse(sse.data);\n        if (typeof parsed === \"object\") {\n          // ???\n          this._nextEvent = parsed;\n          this._state = WatchStreamState.HAVE_EVENT;\n          return;\n        }\n      } catch {\n        // fallthrough to same handling as for non-document value.\n      }\n      this._state = WatchStreamState.HAVE_ERROR;\n      this._error = new WatchError({\n        message: \"server returned malformed event: \" + sse.data,\n        code: \"bad bson parse\"\n      });\n    } else if (sse.eventType === \"error\") {\n      this._state = WatchStreamState.HAVE_ERROR;\n      // default error message if we have issues parsing the reply.\n      this._error = new WatchError({\n        message: sse.data,\n        code: \"unknown\"\n      });\n      try {\n        const {\n          error_code: errorCode,\n          error\n        } = EJSON.parse(sse.data);\n        if (typeof errorCode !== \"string\") return;\n        if (typeof error !== \"string\") return;\n        // XXX in realm-js, object-store will error if the error_code is not one of the known\n        // error code enum values.\n        this._error = new WatchError({\n          message: error,\n          code: errorCode\n        });\n      } catch {\n        return; // Use the default state.\n      }\n    } else ;\n  }\n  get state() {\n    return this._state;\n  }\n  // Consumes the returned event. If you used feedBuffer(), there may be another event or error after this one,\n  // so you need to call state() again to see what to do next.\n  nextEvent() {\n    this.assertState(WatchStreamState.HAVE_EVENT);\n    // We can use \"as ChangeEvent<T>\" since we just asserted the state.\n    const out = this._nextEvent;\n    this._state = WatchStreamState.NEED_DATA;\n    this.advanceBufferState();\n    return out;\n  }\n  // Once this enters the error state, it stays that way. You should not feed any more data.\n  get error() {\n    return this._error;\n  }\n  ////////////////////////////////////////////\n  advanceBufferState() {\n    this.assertState(WatchStreamState.NEED_DATA);\n    while (this.state === WatchStreamState.NEED_DATA) {\n      if (this._bufferOffset === this._buffer.length) {\n        this._buffer = \"\";\n        this._bufferOffset = 0;\n        return;\n      }\n      // NOTE not supporting CR-only newlines, just LF and CRLF.\n      const nextNewlineIndex = this._buffer.indexOf(\"\\n\", this._bufferOffset);\n      if (nextNewlineIndex === -1) {\n        // We have a partial line.\n        if (this._bufferOffset !== 0) {\n          // Slide the partial line down to the front of the buffer.\n          this._buffer = this._buffer.substr(this._bufferOffset, this._buffer.length - this._bufferOffset);\n          this._bufferOffset = 0;\n        }\n        return;\n      }\n      this.feedLine(this._buffer.substr(this._bufferOffset, nextNewlineIndex - this._bufferOffset));\n      this._bufferOffset = nextNewlineIndex + 1; // Advance past this line, including its newline.\n    }\n  }\n  assertState(state) {\n    if (this._state !== state) {\n      throw Error(`Expected WatchStream to be in state ${state}, but in state ${this._state}`);\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * A remote collection of documents.\n */\nclass MongoDBCollection {\n  /**\n   * Construct a remote collection of documents.\n   * @param fetcher The fetcher to use when requesting the service.\n   * @param serviceName The name of the remote service.\n   * @param databaseName The name of the database.\n   * @param collectionName The name of the remote collection.\n   */\n  constructor(fetcher, serviceName, databaseName, collectionName) {\n    this.functions = FunctionsFactory.create(fetcher, {\n      serviceName\n    });\n    this.databaseName = databaseName;\n    this.collectionName = collectionName;\n    this.serviceName = serviceName;\n    this.fetcher = fetcher;\n  }\n  /** @inheritdoc */\n  find(filter = {}, options = {}) {\n    return this.functions.find({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort,\n      limit: options.limit\n    });\n  }\n  /** @inheritdoc */\n  findOne(filter = {}, options = {}) {\n    return this.functions.findOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort\n    });\n  }\n  /** @inheritdoc */\n  findOneAndUpdate(filter = {}, update, options = {}) {\n    return this.functions.findOneAndUpdate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter,\n      update,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument\n    });\n  }\n  /** @inheritdoc */\n  findOneAndReplace(filter = {}, replacement, options = {}) {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter: filter,\n      update: replacement,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument\n    });\n  }\n  /** @inheritdoc */\n  findOneAndDelete(filter = {}, options = {}) {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter,\n      sort: options.sort,\n      projection: options.projection\n    });\n  }\n  /** @inheritdoc */\n  aggregate(pipeline) {\n    return this.functions.aggregate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      pipeline\n    });\n  }\n  /** @inheritdoc */\n  count(filter = {}, options = {}) {\n    return this.functions.count({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      limit: options.limit\n    });\n  }\n  /** @inheritdoc */\n  insertOne(document) {\n    return this.functions.insertOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      document\n    });\n  }\n  /** @inheritdoc */\n  insertMany(documents) {\n    return this.functions.insertMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      documents\n    });\n  }\n  /** @inheritdoc */\n  deleteOne(filter = {}) {\n    return this.functions.deleteOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter\n    });\n  }\n  /** @inheritdoc */\n  deleteMany(filter = {}) {\n    return this.functions.deleteMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter\n    });\n  }\n  /** @inheritdoc */\n  updateOne(filter, update, options = {}) {\n    return this.functions.updateOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert,\n      arrayFilters: options.arrayFilters\n    });\n  }\n  /** @inheritdoc */\n  updateMany(filter, update, options = {}) {\n    return this.functions.updateMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert,\n      arrayFilters: options.arrayFilters\n    });\n  }\n  watch({\n    ids,\n    filter\n  } = {}) {\n    const iterable = this.functions.callFunctionStreaming(\"watch\", {\n      database: this.databaseName,\n      collection: this.collectionName,\n      ids,\n      filter\n    });\n    // Unpack the async iterable, making it possible for us to propagate the `return` when this generator is returning\n    const iterator = iterable.then(i => i[Symbol.asyncIterator]());\n    const stream = this.watchImpl(iterator);\n    // Store the original return on the stream, to enable propagating to the original implementation after we've returned on the iterator\n    const originalReturn = stream.return;\n    return Object.assign(stream, {\n      return(value) {\n        iterator.then(i => i.return ? i.return(value) : undefined);\n        return originalReturn.call(stream, value);\n      }\n    });\n  }\n  /**\n   * @param iterator An async iterator of the response body of a watch request.\n   * @yields Change events.\n   * Note: We had to split this from the `watch` method above to enable manually calling `return` on the response body iterator.\n   */\n  async *watchImpl(iterator) {\n    const watchStream = new WatchStream();\n    // Repack the iterator into an interable for the `watchImpl` to consume\n    const iterable = iterator.then(i => ({\n      [Symbol.asyncIterator]: () => i\n    }));\n    // Start consuming change events\n    for await (const chunk of await iterable) {\n      if (!chunk) continue;\n      watchStream.feedBuffer(chunk);\n      while (watchStream.state == WatchStreamState.HAVE_EVENT) {\n        yield watchStream.nextEvent();\n      }\n      if (watchStream.state == WatchStreamState.HAVE_ERROR)\n        // XXX this is just throwing an error like {error_code: \"BadRequest, error: \"message\"},\n        // which matches realm-js, but is different from how errors are handled in realm-web\n        throw watchStream.error;\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Creates an Remote MongoDB Collection.\n * Note: This method exists to enable function binding.\n * @param fetcher The underlying fetcher.\n * @param serviceName A service name.\n * @param databaseName A database name.\n * @param collectionName A collection name.\n * @returns The collection.\n */\nfunction createCollection(fetcher, serviceName, databaseName, collectionName) {\n  return new MongoDBCollection(fetcher, serviceName, databaseName, collectionName);\n}\n/**\n * Creates a Remote MongoDB Database.\n * Note: This method exists to enable function binding.\n * @param fetcher The underlying fetcher\n * @param serviceName A service name\n * @param databaseName A database name\n * @returns The database.\n */\nfunction createDatabase(fetcher, serviceName, databaseName) {\n  return {\n    collection: createCollection.bind(null, fetcher, serviceName, databaseName)\n  };\n}\n/**\n * Creates a Remote MongoDB Service.\n * Note: This method exists to enable function binding.\n * @param fetcher The underlying fetcher.\n * @param serviceName An optional service name.\n * @returns The service.\n */\nfunction createService(fetcher, serviceName = \"mongo-db\") {\n  return {\n    db: createDatabase.bind(null, fetcher, serviceName)\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// We're using a dependency to decode Base64 to UTF-8, because of https://stackoverflow.com/a/30106551/503899\nconst DEFAULT_DEVICE_ID = \"000000000000000000000000\";\n/** The state of a user within the app */\nvar UserState;\n(function (UserState) {\n  /** Active, with both access and refresh tokens */\n  UserState[\"Active\"] = \"active\";\n  /** Logged out, but there might still be data persisted about the user, in the browser. */\n  UserState[\"LoggedOut\"] = \"logged-out\";\n  /** Logged out and all data about the user has been removed. */\n  UserState[\"Removed\"] = \"removed\";\n})(UserState || (UserState = {}));\n/** The type of a user. */\nvar UserType;\n(function (UserType) {\n  /** Created by the user itself. */\n  UserType[\"Normal\"] = \"normal\";\n  /** Created by an administrator of the app. */\n  UserType[\"Server\"] = \"server\";\n})(UserType || (UserType = {}));\n/**\n * Representation of an authenticated user of an app.\n */\nclass User {\n  /**\n   * @param parameters Parameters of the user.\n   */\n  constructor(parameters) {\n    this.app = parameters.app;\n    this.id = parameters.id;\n    this.storage = new UserStorage(this.app.storage, this.id);\n    if (\"accessToken\" in parameters && \"refreshToken\" in parameters && \"providerType\" in parameters) {\n      this._accessToken = parameters.accessToken;\n      this._refreshToken = parameters.refreshToken;\n      this.providerType = parameters.providerType;\n      // Save the parameters to storage, for future instances to be hydrated from\n      this.storage.accessToken = parameters.accessToken;\n      this.storage.refreshToken = parameters.refreshToken;\n      this.storage.providerType = parameters.providerType;\n    } else {\n      // Hydrate the rest of the parameters from storage\n      this._accessToken = this.storage.accessToken;\n      this._refreshToken = this.storage.refreshToken;\n      const providerType = this.storage.providerType;\n      this._profile = this.storage.profile;\n      if (providerType) {\n        this.providerType = providerType;\n      } else {\n        throw new Error(\"Storage is missing a provider type\");\n      }\n    }\n    this.fetcher = this.app.fetcher.clone({\n      userContext: {\n        currentUser: this\n      }\n    });\n    this.apiKeys = new ApiKeyAuth(this.fetcher);\n    this.functions = FunctionsFactory.create(this.fetcher);\n  }\n  /**\n   * @returns The access token used to authenticate the user towards Atlas App Services.\n   */\n  get accessToken() {\n    return this._accessToken;\n  }\n  /**\n   * @param token The new access token.\n   */\n  set accessToken(token) {\n    this._accessToken = token;\n    this.storage.accessToken = token;\n  }\n  /**\n   * @returns The refresh token used to issue new access tokens.\n   */\n  get refreshToken() {\n    return this._refreshToken;\n  }\n  /**\n   * @param token The new refresh token.\n   */\n  set refreshToken(token) {\n    this._refreshToken = token;\n    this.storage.refreshToken = token;\n  }\n  /**\n   * @returns The current state of the user.\n   */\n  get state() {\n    if (this.id in this.app.allUsers) {\n      return this.refreshToken === null ? UserState.LoggedOut : UserState.Active;\n    } else {\n      return UserState.Removed;\n    }\n  }\n  /**\n   * @returns The logged in state of the user.\n   */\n  get isLoggedIn() {\n    return this.state === UserState.Active;\n  }\n  get customData() {\n    if (this.accessToken) {\n      const decodedToken = this.decodeAccessToken();\n      return decodedToken.userData;\n    } else {\n      throw new Error(\"Cannot read custom data without an access token\");\n    }\n  }\n  /**\n   * @returns Profile containing detailed information about the user.\n   */\n  get profile() {\n    if (this._profile) {\n      return this._profile.data;\n    } else {\n      throw new Error(\"A profile was never fetched for this user\");\n    }\n  }\n  get identities() {\n    if (this._profile) {\n      return this._profile.identities;\n    } else {\n      throw new Error(\"A profile was never fetched for this user\");\n    }\n  }\n  get deviceId() {\n    if (this.accessToken) {\n      const payload = this.accessToken.split(\".\")[1];\n      if (payload) {\n        const parsedPayload = JSON.parse(gBase64.decode(payload));\n        const deviceId = parsedPayload[\"baas_device_id\"];\n        if (typeof deviceId === \"string\" && deviceId !== DEFAULT_DEVICE_ID) {\n          return deviceId;\n        }\n      }\n    }\n    return null;\n  }\n  /**\n   * Refresh the users profile data.\n   */\n  async refreshProfile() {\n    // Fetch the latest profile\n    const response = await this.fetcher.fetchJSON({\n      method: \"GET\",\n      path: routes.api().auth().profile().path\n    });\n    // Create a profile instance\n    this._profile = new UserProfile(response);\n    // Store this for later hydration\n    this.storage.profile = this._profile;\n  }\n  /**\n   * Log out the user, invalidating the session (and its refresh token).\n   */\n  async logOut() {\n    // Invalidate the refresh token\n    try {\n      if (this._refreshToken !== null) {\n        await this.fetcher.fetchJSON({\n          method: \"DELETE\",\n          path: routes.api().auth().session().path,\n          tokenType: \"refresh\"\n        });\n      }\n    } catch (err) {\n      // Ignore failing to delete a missing refresh token\n      // It might have expired or it might be gone due to the user being deleted\n      if (!(err instanceof Error) || !err.message.includes(\"failed to find refresh token\")) {\n        throw err;\n      }\n    } finally {\n      // Forget the access and refresh token\n      this.accessToken = null;\n      this.refreshToken = null;\n    }\n  }\n  /** @inheritdoc */\n  async linkCredentials(credentials) {\n    const response = await this.app.authenticator.authenticate(credentials, this);\n    // Sanity check the response\n    if (this.id !== response.userId) {\n      const details = `got user id ${response.userId} expected ${this.id}`;\n      throw new Error(`Link response ment for another user (${details})`);\n    }\n    // Update the access token\n    this.accessToken = response.accessToken;\n    // Refresh the profile to include the new identity\n    await this.refreshProfile();\n  }\n  /**\n   * Request a new access token, using the refresh token.\n   */\n  async refreshAccessToken() {\n    const response = await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: routes.api().auth().session().path,\n      tokenType: \"refresh\"\n    });\n    const {\n      access_token: accessToken\n    } = response;\n    if (typeof accessToken === \"string\") {\n      this.accessToken = accessToken;\n    } else {\n      throw new Error(\"Expected an 'access_token' in the response\");\n    }\n  }\n  /** @inheritdoc */\n  async refreshCustomData() {\n    await this.refreshAccessToken();\n    return this.customData;\n  }\n  /**\n   * @inheritdoc\n   */\n  addListener() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /**\n   * @inheritdoc\n   */\n  removeListener() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /**\n   * @inheritdoc\n   */\n  removeAllListeners() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /** @inheritdoc */\n  callFunction(name, ...args) {\n    return this.functions.callFunction(name, ...args);\n  }\n  /**\n   * @returns A plain ol' JavaScript object representation of the user.\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      accessToken: this.accessToken,\n      refreshToken: this.refreshToken,\n      profile: this._profile,\n      state: this.state,\n      customData: this.customData\n    };\n  }\n  /** @inheritdoc */\n  push() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /** @inheritdoc */\n  mongoClient(serviceName) {\n    return createService(this.fetcher, serviceName);\n  }\n  decodeAccessToken() {\n    if (this.accessToken) {\n      // Decode and spread the token\n      const parts = this.accessToken.split(\".\");\n      if (parts.length !== 3) {\n        throw new Error(\"Expected an access token with three parts\");\n      }\n      // Decode the payload\n      const encodedPayload = parts[1];\n      const decodedPayload = gBase64.decode(encodedPayload);\n      const parsedPayload = JSON.parse(decodedPayload);\n      const {\n        exp: expires,\n        iat: issuedAt,\n        sub: subject,\n        user_data: userData = {}\n      } = parsedPayload;\n      // Validate the types\n      if (typeof expires !== \"number\") {\n        throw new Error(\"Failed to decode access token 'exp'\");\n      } else if (typeof issuedAt !== \"number\") {\n        throw new Error(\"Failed to decode access token 'iat'\");\n      }\n      return {\n        expires,\n        issuedAt,\n        subject,\n        userData\n      };\n    } else {\n      throw new Error(\"Missing an access token\");\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// TODO: Ensure the static interface of the Credentials class implements the static interface of Realm.Credentials\n// See https://stackoverflow.com/a/43484801\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\nclass Credentials {\n  /**\n   * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).\n   * @param reuse - Reuse any existing anonymous user already logged in.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static anonymous(reuse = true) {\n    return new Credentials(\"anon-user\", \"anon-user\", reuse, {});\n  }\n  /**\n   * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n   * @param key The secret content of the API key.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static apiKey(key) {\n    return new Credentials(\"api-key\", \"api-key\", false, {\n      key\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).\n   * Note: This was formerly known as the \"Username/Password\" provider.\n   * @param email The end-users email address.\n   * @param password The end-users password.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static emailPassword(email, password) {\n    return new Credentials(\"local-userpass\", \"local-userpass\", false, {\n      username: email,\n      password\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).\n   * @param payload The custom payload as expected by the server.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static function(payload) {\n    return new Credentials(\"custom-function\", \"custom-function\", false, payload);\n  }\n  /**\n   * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).\n   * @param token The JSON Web Token (JWT).\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static jwt(token) {\n    return new Credentials(\"custom-token\", \"custom-token\", false, {\n      token\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).\n   * @param payload The URL that users should be redirected to, the auth code or id token from Google.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static google(payload) {\n    return new Credentials(\"oauth2-google\", \"oauth2-google\", false, Credentials.derivePayload(payload));\n  }\n  /**\n   * @param payload The payload string.\n   * @returns A payload object based on the string.\n   */\n  static derivePayload(payload) {\n    if (typeof payload === \"string\") {\n      throw new Error(\"`google(<tokenString>)` has been deprecated.  Please use `google(<authCodeObject>).\");\n    } else if (Object.keys(payload).length === 1) {\n      if (\"authCode\" in payload || \"redirectUrl\" in payload) {\n        return payload;\n      } else if (\"idToken\" in payload) {\n        return {\n          id_token: payload.idToken\n        };\n      } else {\n        throw new Error(\"Unexpected payload: \" + JSON.stringify(payload));\n      }\n    } else {\n      throw new Error(\"Expected only one property in payload, got \" + JSON.stringify(payload));\n    }\n  }\n  /**\n   * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).\n   * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static facebook(redirectUrlOrAccessToken) {\n    return new Credentials(\"oauth2-facebook\", \"oauth2-facebook\", false, redirectUrlOrAccessToken.includes(\"://\") ? {\n      redirectUrl: redirectUrlOrAccessToken\n    } : {\n      accessToken: redirectUrlOrAccessToken\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).\n   * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static apple(redirectUrlOrIdToken) {\n    return new Credentials(\"oauth2-apple\", \"oauth2-apple\", false, redirectUrlOrIdToken.includes(\"://\") ? {\n      redirectUrl: redirectUrlOrIdToken\n    } : {\n      id_token: redirectUrlOrIdToken\n    });\n  }\n  /**\n   * Constructs an instance of credentials.\n   * @param providerName The name of the authentication provider used when authenticating.\n   * @param providerType The type of the authentication provider used when authenticating.\n   * @param reuse Reuse any user already authenticated with this provider.\n   * @param payload The data being sent to the service when authenticating.\n   */\n  constructor(providerName, providerType, reuse, payload) {\n    this.providerName = providerName;\n    this.providerType = providerType;\n    this.reuse = reuse;\n    this.payload = payload;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst USER_IDS_STORAGE_KEY = \"userIds\";\nconst DEVICE_ID_STORAGE_KEY$1 = \"deviceId\";\n/**\n * Storage specific to the app.\n */\nclass AppStorage extends PrefixedStorage {\n  /**\n   * @param storage The underlying storage to wrap.\n   * @param appId The id of the app.\n   */\n  constructor(storage, appId) {\n    super(storage, `app(${appId})`);\n  }\n  /**\n   * Reads out the list of user ids from storage.\n   * @returns A list of user ids.\n   */\n  getUserIds() {\n    const userIdsString = this.get(USER_IDS_STORAGE_KEY);\n    const userIds = userIdsString ? JSON.parse(userIdsString) : [];\n    if (Array.isArray(userIds)) {\n      // Remove any duplicates that might have been added\n      // The Set preserves insertion order\n      return [...new Set(userIds)];\n    } else {\n      throw new Error(\"Expected the user ids to be an array\");\n    }\n  }\n  /**\n   * Sets the list of ids in storage.\n   * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.\n   * @param userIds The list of ids to store.\n   * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.\n   */\n  setUserIds(userIds, mergeWithExisting) {\n    if (mergeWithExisting) {\n      // Add any existing user id to the end of this list, avoiding duplicates\n      const existingIds = this.getUserIds();\n      for (const id of existingIds) {\n        if (userIds.indexOf(id) === -1) {\n          userIds.push(id);\n        }\n      }\n    }\n    // Store the list of ids\n    this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));\n  }\n  /**\n   * Remove an id from the list of ids.\n   * @param userId The id of a User to be removed.\n   */\n  removeUserId(userId) {\n    const existingIds = this.getUserIds();\n    const userIds = existingIds.filter(id => id !== userId);\n    // Store the list of ids\n    this.setUserIds(userIds, false);\n  }\n  /**\n   * @returns id of this device (if any exists)\n   */\n  getDeviceId() {\n    return this.get(DEVICE_ID_STORAGE_KEY$1);\n  }\n  /**\n   * @param deviceId The id of this device, to send on subsequent authentication requests.\n   */\n  setDeviceId(deviceId) {\n    this.set(DEVICE_ID_STORAGE_KEY$1, deviceId);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst LOWERCASE_LETTERS = \"abcdefghijklmnopqrstuvwxyz\";\nconst CLOSE_CHECK_INTERVAL = 100; // 10 times per second\nconst REDIRECT_HASH_TO_RESULT = {\n  _baas_client_app_id: \"appId\",\n  _baas_ua: \"userAuth\",\n  _baas_link: \"link\",\n  _baas_error: \"error\",\n  _baas_state: \"state\"\n};\n/**\n * A collection of methods helping implement the OAuth2 flow.\n */\nclass OAuth2Helper {\n  /**\n   * Parses the query string from the final step of the OAuth flow.\n   * @param queryString The query string passed through in location.hash.\n   * @returns The result of the OAuth flow.\n   */\n  static parseRedirectLocation(queryString) {\n    const params = decodeQueryString(queryString);\n    const result = {};\n    for (const [p, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {\n      const value = params[p];\n      if (value) {\n        result[r] = value;\n      }\n    }\n    return result;\n  }\n  /**\n   * Handle the redirect querystring by parsing it and storing it for others to consume.\n   * @param queryString The query string containing the encoded result from the OAuth provider.\n   * @param storage The underlying storage used to persist the result.\n   */\n  static handleRedirect(queryString, storage = getEnvironment().defaultStorage) {\n    const result = OAuth2Helper.parseRedirectLocation(queryString);\n    const {\n      state,\n      error\n    } = result;\n    if (typeof state === \"string\") {\n      const oauth2Storage = storage.prefix(\"oauth2\");\n      const stateStorage = OAuth2Helper.getStateStorage(oauth2Storage, state);\n      stateStorage.set(\"result\", JSON.stringify(result));\n    } else if (error) {\n      throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);\n    } else {\n      throw new Error(\"Failed to handle OAuth 2.0 redirect.\");\n    }\n  }\n  /**\n   * Decodes the authInfo string into its seperate parts.\n   * @param authInfo An authInfo string returned from the server.\n   * @returns An object containing the separate parts of the authInfo string.\n   */\n  static decodeAuthInfo(authInfo) {\n    const parts = (authInfo || \"\").split(\"$\");\n    if (parts.length === 4) {\n      const [accessToken, refreshToken, userId, deviceId] = parts;\n      return {\n        accessToken,\n        refreshToken,\n        userId,\n        deviceId\n      };\n    } else {\n      throw new Error(\"Failed to decode 'authInfo' into ids and tokens\");\n    }\n  }\n  /**\n   * Get the storage key associated of an secret associated with a state.\n   * @param storage The root storage used to derive a \"state namespaced\" storage.\n   * @param state The random state.\n   * @returns The storage associated with a particular state.\n   */\n  static getStateStorage(storage, state) {\n    return storage.prefix(`state(${state})`);\n  }\n  /**\n   * @param storage The underlying storage to use when storing and retriving secrets.\n   * @param openWindow An optional function called when a browser window needs to open.\n   */\n  constructor(storage, openWindow = getEnvironment().openWindow) {\n    this.storage = storage.prefix(\"oauth2\");\n    this.openWindow = openWindow;\n  }\n  /**\n   * Open a window and wait for the redirect to be handled.\n   * @param url The URL to open.\n   * @param state The state which will be used to listen for storage updates.\n   * @returns The result passed through the redirect.\n   */\n  openWindowAndWaitForRedirect(url, state) {\n    const stateStorage = OAuth2Helper.getStateStorage(this.storage, state);\n    // Return a promise that resolves when the  gets known\n    return new Promise((resolve, reject) => {\n      let redirectWindow = null;\n      // We're declaring the interval now to enable referencing before its initialized\n      let windowClosedInterval; // eslint-disable-line prefer-const\n      const handleStorageUpdate = () => {\n        // Trying to get the secret from storage\n        const result = stateStorage.get(\"result\");\n        if (result) {\n          const parsedResult = JSON.parse(result);\n          // The secret got updated!\n          stateStorage.removeListener(handleStorageUpdate);\n          // Clear the storage to prevent others from reading this\n          stateStorage.clear();\n          // Try closing the newly created window\n          try {\n            if (redirectWindow) {\n              // Stop checking if the window closed\n              clearInterval(windowClosedInterval);\n              redirectWindow.close();\n            }\n          } catch (err) {\n            console.warn(`Failed closing redirect window: ${err}`);\n          } finally {\n            resolve(parsedResult);\n          }\n        }\n      };\n      // Add a listener to the state storage, awaiting an update to the secret\n      stateStorage.addListener(handleStorageUpdate);\n      // Open up a window\n      redirectWindow = this.openWindow(url);\n      // Not using a const, because we need the two listeners to reference each other when removing the other.\n      windowClosedInterval = setInterval(() => {\n        // Polling \"closed\" because registering listeners on the window violates cross-origin policies\n        if (!redirectWindow) {\n          // No need to keep polling for a window that we can't check\n          clearInterval(windowClosedInterval);\n        } else if (redirectWindow.closed) {\n          // Stop polling the window state\n          clearInterval(windowClosedInterval);\n          // Stop listening for changes to the storage\n          stateStorage.removeListener(handleStorageUpdate);\n          // Reject the promise\n          const err = new Error(\"Window closed\");\n          reject(err);\n        }\n      }, CLOSE_CHECK_INTERVAL);\n    });\n  }\n  /**\n   * Generate a random state string.\n   * @returns The random state string.\n   */\n  generateState() {\n    return generateRandomString(12, LOWERCASE_LETTERS);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst REDIRECT_LOCATION_HEADER = \"x-baas-location\";\n/**\n * Handles authentication and linking of users.\n */\nclass Authenticator {\n  /**\n   * @param fetcher The fetcher used to fetch responses from the server.\n   * @param storage The storage used when completing OAuth 2.0 flows (should not be scoped to a specific app).\n   * @param getDeviceInformation Called to get device information to be sent to the server.\n   */\n  constructor(fetcher, storage, getDeviceInformation) {\n    this.fetcher = fetcher;\n    this.oauth2 = new OAuth2Helper(storage);\n    this.getDeviceInformation = getDeviceInformation;\n  }\n  /**\n   * @param credentials Credentials to use when logging in.\n   * @param linkingUser A user requesting to link.\n   * @returns A promise resolving to the response from the server.\n   */\n  async authenticate(credentials, linkingUser) {\n    const deviceInformation = this.getDeviceInformation();\n    const isLinking = typeof linkingUser === \"object\";\n    if (credentials.providerType.startsWith(\"oauth2\") && typeof credentials.payload.redirectUrl === \"string\") {\n      // Initiate the OAuth2 flow by generating a state and fetch a redirect URL\n      const state = this.oauth2.generateState();\n      const url = await this.getLogInUrl(credentials, isLinking, {\n        state,\n        redirect: credentials.payload.redirectUrl,\n        // Ensure redirects are communicated in a header different from \"Location\" and status remains 200 OK\n        providerRedirectHeader: isLinking ? true : undefined,\n        // Add the device information, only if we're not linking - since that request won't have a body of its own.\n        device: !isLinking ? deviceInformation.encode() : undefined\n      });\n      // If we're linking, we need to send the users access token in the request\n      if (isLinking) {\n        const response = await this.fetcher.fetch({\n          method: \"GET\",\n          url,\n          tokenType: isLinking ? \"access\" : \"none\",\n          user: linkingUser,\n          // The response will set a cookie that we need to tell the browser to store\n          mode: \"cors\",\n          credentials: \"include\"\n        });\n        // If a response header contains a redirect URL: Open a window and wait for the redirect to be handled\n        const redirectUrl = response.headers.get(REDIRECT_LOCATION_HEADER);\n        if (redirectUrl) {\n          return this.openWindowAndWaitForAuthResponse(redirectUrl, state);\n        } else {\n          throw new Error(`Missing ${REDIRECT_LOCATION_HEADER} header`);\n        }\n      } else {\n        // Otherwise we can open a window and let the server redirect the user right away\n        // This gives lower latency (as we don't need the client to receive and execute the redirect in code)\n        // This also has less dependency on cookies and doesn't sent any tokens.\n        return this.openWindowAndWaitForAuthResponse(url, state);\n      }\n    } else {\n      const logInUrl = await this.getLogInUrl(credentials, isLinking);\n      const response = await this.fetcher.fetchJSON({\n        method: \"POST\",\n        url: logInUrl,\n        body: {\n          ...credentials.payload,\n          options: {\n            device: deviceInformation.toJSON()\n          }\n        },\n        tokenType: isLinking ? \"access\" : \"none\",\n        user: linkingUser\n      });\n      // Spread out values from the response and ensure they're valid\n      const {\n        user_id: userId,\n        access_token: accessToken,\n        refresh_token: refreshToken = null,\n        device_id: deviceId\n      } = response;\n      if (typeof userId !== \"string\") {\n        throw new Error(\"Expected a user id in the response\");\n      }\n      if (typeof accessToken !== \"string\") {\n        throw new Error(\"Expected an access token in the response\");\n      }\n      if (typeof refreshToken !== \"string\" && refreshToken !== null) {\n        throw new Error(\"Expected refresh token to be a string or null\");\n      }\n      if (typeof deviceId !== \"string\") {\n        throw new Error(\"Expected device id to be a string\");\n      }\n      return {\n        userId,\n        accessToken,\n        refreshToken,\n        deviceId\n      };\n    }\n  }\n  /**\n   * @param credentials Credentials to use when logging in.\n   * @param link Should the request link with the current user?\n   * @param extraQueryParams Any extra parameters to include in the query string\n   * @returns A promise resolving to the url to be used when logging in.\n   */\n  async getLogInUrl(credentials, link = false, extraQueryParams = {}) {\n    // See https://github.com/mongodb/stitch-js-sdk/blob/310f0bd5af80f818cdfbc3caf1ae29ffa8e9c7cf/packages/core/sdk/src/auth/internal/CoreStitchAuth.ts#L746-L780\n    const appRoute = this.fetcher.appRoute;\n    const loginRoute = appRoute.authProvider(credentials.providerName).login();\n    const qs = encodeQueryString({\n      link: link ? \"true\" : undefined,\n      ...extraQueryParams\n    });\n    const locationUrl = await this.fetcher.locationUrl;\n    return locationUrl + loginRoute.path + qs;\n  }\n  async openWindowAndWaitForAuthResponse(redirectUrl, state) {\n    const redirectResult = await this.oauth2.openWindowAndWaitForRedirect(redirectUrl, state);\n    // Decode the auth info (id, tokens, etc.) from the result of the redirect\n    return OAuth2Helper.decodeAuthInfo(redirectResult.userAuth);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// TODO: Determine if the shape of an error response is specific to each service or widely used.\n/**\n * An error produced while communicating with the MongoDB Realm server.\n */\nclass MongoDBRealmError extends Error {\n  /**\n   * Constructs and returns an error from a request and a response.\n   * Note: The caller must throw this error themselves.\n   * @param url The url of the requested resource.\n   * @param request The request sent to the server.\n   * @param response A raw response, as returned from the server.\n   * @returns An error from a request and a response.\n   */\n  static async fromRequestAndResponse(url, request, response) {\n    var _a;\n    const {\n      method = \"unknown\"\n    } = request;\n    const {\n      status,\n      statusText\n    } = response;\n    if ((_a = response.headers.get(\"content-type\")) === null || _a === void 0 ? void 0 : _a.startsWith(\"application/json\")) {\n      const body = await response.json();\n      if (typeof body === \"object\" && body) {\n        const {\n          error,\n          error_code: errorCode,\n          link\n        } = body;\n        return new MongoDBRealmError(method, url, status, statusText, typeof error === \"string\" ? error : undefined, typeof errorCode === \"string\" ? errorCode : undefined, typeof link === \"string\" ? link : undefined);\n      }\n    }\n    return new MongoDBRealmError(method, url, status, statusText);\n  }\n  constructor(method, url, statusCode, statusText, error, errorCode, link) {\n    const summary = statusText ? `status ${statusCode} ${statusText}` : `status ${statusCode}`;\n    if (typeof error === \"string\") {\n      super(`Request failed (${method} ${url}): ${error} (${summary})`);\n    } else {\n      super(`Request failed (${method} ${url}): (${summary})`);\n    }\n    this.method = method;\n    this.url = url;\n    this.statusText = statusText;\n    this.statusCode = statusCode;\n    this.error = error;\n    this.errorCode = errorCode;\n    this.link = link;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * @param response A possible response.\n * @param response.body A possible response body.\n * @returns An async iterator.\n */\nfunction asyncIteratorFromResponseBody({\n  body\n}) {\n  if (typeof body !== \"object\" || body === null) {\n    throw new Error(\"Expected a non-null object\");\n  } else if (\"getReader\" in body) {\n    return {\n      [Symbol.asyncIterator]() {\n        const reader = body.getReader();\n        return {\n          async next() {\n            const {\n              done,\n              value\n            } = await reader.read();\n            if (done) {\n              // TODO: Simply return the result once https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1676 is merged and released\n              return {\n                done,\n                value: undefined\n              };\n            } else if (value instanceof Uint8Array) {\n              return {\n                done,\n                value\n              };\n            } else {\n              throw new Error(\"Expected value to be Uint8Array\");\n            }\n          },\n          async return() {\n            await reader.cancel();\n            return {\n              done: true,\n              value: null\n            };\n          }\n        };\n      }\n    };\n  } else {\n    throw new Error(\"Expected an AsyncIterable or a ReadableStream\");\n  }\n}\n/**\n * Wraps the fetch from the \"@realm/fetch\" package.\n * Extracts error messages and throws `MongoDBRealmError` objects upon failures.\n * Injects access or refresh tokens for a current or specific user.\n * Refreshes access tokens if requests fails due to a 401 error.\n * Optionally parses response as JSON before returning it.\n * Fetches and exposes an app's location url.\n */\nclass Fetcher {\n  /**\n   * @param user An optional user to generate the header for.\n   * @param tokenType The type of token (access or refresh).\n   * @returns An object containing the user's token as \"Authorization\" header or undefined if no user is given.\n   */\n  static buildAuthorizationHeader(user, tokenType) {\n    if (!user || tokenType === \"none\") {\n      return {};\n    } else if (tokenType === \"access\") {\n      return {\n        Authorization: `Bearer ${user.accessToken}`\n      };\n    } else if (tokenType === \"refresh\") {\n      return {\n        Authorization: `Bearer ${user.refreshToken}`\n      };\n    } else {\n      throw new Error(`Unexpected token type (${tokenType})`);\n    }\n  }\n  /**\n   * @param body The body string or object passed from a request.\n   * @returns An object optionally specifying the \"Content-Type\" header.\n   */\n  static buildBody(body) {\n    if (!body) {\n      return;\n    } else if (typeof body === \"object\" && body !== null) {\n      return JSON.stringify(serialize(body));\n    } else if (typeof body === \"string\") {\n      return body;\n    } else {\n      console.log(\"body is\", body);\n      throw new Error(\"Unexpected type of body\");\n    }\n  }\n  /**\n   * @param body The body string or object passed from a request.\n   * @returns An object optionally specifying the \"Content-Type\" header.\n   */\n  static buildJsonHeader(body) {\n    if (body && body.length > 0) {\n      return {\n        \"Content-Type\": \"application/json\"\n      };\n    } else {\n      return {};\n    }\n  }\n  /**\n   * @param config A configuration of the fetcher.\n   * @param config.appId The application id.\n   * @param config.fetch The fetch function used when fetching.\n   * @param config.userContext An object used to determine the requesting user.\n   * @param config.locationUrlContext An object used to determine the location / base URL.\n   */\n  constructor(config) {\n    this.config = config;\n  }\n  clone(config) {\n    return new Fetcher({\n      ...this.config,\n      ...config\n    });\n  }\n  /**\n   * Fetch a network resource as an authenticated user.\n   * @param request The request which should be sent to the server.\n   * @returns The response from the server.\n   */\n  async fetch(request) {\n    const {\n      path,\n      url,\n      tokenType = \"access\",\n      user = this.config.userContext.currentUser,\n      ...restOfRequest\n    } = request;\n    if (typeof path === \"string\" && typeof url === \"string\") {\n      throw new Error(\"Use of 'url' and 'path' mutually exclusive\");\n    } else if (typeof path === \"string\") {\n      // Derive the URL\n      const url = (await this.config.locationUrlContext.locationUrl) + path;\n      return this.fetch({\n        ...request,\n        path: undefined,\n        url\n      });\n    } else if (typeof url === \"string\") {\n      const response = await this.config.fetch(url, {\n        ...restOfRequest,\n        headers: {\n          ...Fetcher.buildAuthorizationHeader(user, tokenType),\n          ...request.headers\n        }\n      });\n      if (response.ok) {\n        return response;\n      } else {\n        const error = await MongoDBRealmError.fromRequestAndResponse(url, request, response);\n        if (user && response.status === 401 && (error.errorCode === \"InvalidSession\" ||\n        // Expired token\n        error.error === \"unauthorized\") // Entirely invalid signature\n        ) {\n          if (tokenType === \"access\") {\n            // If the access token has expired, it would help refreshing it\n            await user.refreshAccessToken();\n            // Retry with the specific user, since the currentUser might have changed.\n            return this.fetch({\n              ...request,\n              user\n            });\n          } else if (tokenType === \"refresh\") {\n            // A 401 error while using the refresh token indicates the token has an issue.\n            // Reset the tokens to prevent a lock.\n            user.accessToken = null;\n            user.refreshToken = null;\n          }\n        }\n        // Throw an error with a message extracted from the body\n        throw error;\n      }\n    } else {\n      throw new Error(\"Expected either 'url' or 'path'\");\n    }\n  }\n  /**\n   * Fetch a network resource as an authenticated user and parse the result as extended JSON.\n   * @param request The request which should be sent to the server.\n   * @returns The response from the server, parsed as extended JSON.\n   */\n  async fetchJSON(request) {\n    const {\n      body\n    } = request;\n    const serializedBody = Fetcher.buildBody(body);\n    const contentTypeHeaders = Fetcher.buildJsonHeader(serializedBody);\n    const response = await this.fetch({\n      ...request,\n      body: serializedBody,\n      headers: {\n        Accept: \"application/json\",\n        ...contentTypeHeaders,\n        ...request.headers\n      }\n    });\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(\"application/json\")) {\n      const responseBody = await response.json();\n      return deserialize(responseBody);\n    } else if (contentType === null) {\n      return null;\n    } else {\n      throw new Error(`Expected JSON response, got \"${contentType}\"`);\n    }\n  }\n  /**\n   * Fetch an \"event-stream\" resource as an authenticated user.\n   * @param request The request which should be sent to the server.\n   * @returns An async iterator over the response body.\n   */\n  async fetchStream(request) {\n    const response = await this.fetch({\n      ...request,\n      headers: {\n        Accept: \"text/event-stream\",\n        ...request.headers\n      }\n    });\n    return asyncIteratorFromResponseBody(response);\n  }\n  /**\n   * @returns The path of the app route.\n   */\n  get appRoute() {\n    return routes.api().app(this.config.appId);\n  }\n  /**\n   * @returns A promise of the location URL of the app.\n   */\n  get locationUrl() {\n    return this.config.locationUrlContext.locationUrl;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * The key in a storage on which the device id is stored.\n */\nconst DEVICE_ID_STORAGE_KEY = \"deviceId\";\nvar DeviceFields;\n(function (DeviceFields) {\n  DeviceFields[\"DEVICE_ID\"] = \"deviceId\";\n  DeviceFields[\"APP_ID\"] = \"appId\";\n  DeviceFields[\"APP_VERSION\"] = \"appVersion\";\n  DeviceFields[\"PLATFORM\"] = \"platform\";\n  DeviceFields[\"PLATFORM_VERSION\"] = \"platformVersion\";\n  DeviceFields[\"SDK_VERSION\"] = \"sdkVersion\";\n})(DeviceFields || (DeviceFields = {}));\n/**\n * Information describing the device, app and SDK.\n */\nclass DeviceInformation {\n  /**\n   * @param params Construct the device information from these parameters.\n   * @param params.appId A user-defined application id.\n   * @param params.appVersion A user-defined application version.\n   * @param params.deviceId An unique id for the end-users device.\n   */\n  constructor({\n    appId,\n    appVersion,\n    deviceId\n  }) {\n    /**\n     * The version of the Realm Web SDK (constant provided by Rollup).\n     */\n    this.sdkVersion = \"2.0.1\";\n    const environment = getEnvironment();\n    this.platform = environment.platform;\n    this.platformVersion = environment.platformVersion;\n    this.appId = appId;\n    this.appVersion = appVersion;\n    this.deviceId = deviceId;\n  }\n  /**\n   * @returns An base64 URI encoded representation of the device information.\n   */\n  encode() {\n    const obj = removeKeysWithUndefinedValues(this);\n    return gBase64.encode(JSON.stringify(obj));\n  }\n  /**\n   * @returns The defaults\n   */\n  toJSON() {\n    return removeKeysWithUndefinedValues(this);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Default base url to prefix all requests if no baseUrl is specified in the configuration.\n */\nconst DEFAULT_BASE_URL = \"https://services.cloud.mongodb.com\";\n/**\n * Atlas App Services Application\n */\nclass App {\n  /**\n   * Get or create a singleton Realm App from an id.\n   * Calling this function multiple times with the same id will return the same instance.\n   * @param id The Realm App id visible from the Atlas App Services UI or a configuration.\n   * @returns The Realm App instance.\n   */\n  static getApp(id) {\n    if (id in App.appCache) {\n      return App.appCache[id];\n    } else {\n      const instance = new App(id);\n      App.appCache[id] = instance;\n      return instance;\n    }\n  }\n  /**\n   * Construct a Realm App, either from the Realm App id visible from the Atlas App Services UI or a configuration.\n   * @param idOrConfiguration The Realm App id or a configuration to use for this app.\n   */\n  constructor(idOrConfiguration) {\n    var _a;\n    /**\n     * An array of active and logged-out users.\n     * Elements in the beginning of the array is considered more recent than the later elements.\n     */\n    this.users = [];\n    /**\n     * A promise resolving to the App's location url.\n     */\n    this._locationUrl = null;\n    // If the argument is a string, convert it to a simple configuration object.\n    const configuration = typeof idOrConfiguration === \"string\" ? {\n      id: idOrConfiguration\n    } : idOrConfiguration;\n    // Initialize properties from the configuration\n    if (typeof configuration === \"object\" && typeof configuration.id === \"string\") {\n      this.id = configuration.id;\n    } else {\n      throw new Error(\"Missing an Atlas App Services app-id\");\n    }\n    this.baseUrl = configuration.baseUrl || DEFAULT_BASE_URL;\n    if (configuration.skipLocationRequest) {\n      // Use the base url directly, instead of requesting a location URL from the server\n      this._locationUrl = Promise.resolve(this.baseUrl);\n    }\n    this.localApp = configuration.app;\n    // Construct a fetcher wrapping the network transport\n    this.fetcher = new Fetcher({\n      appId: this.id,\n      userContext: this,\n      locationUrlContext: this,\n      fetch: (_a = configuration.fetch) !== null && _a !== void 0 ? _a : fetch\n    });\n    // Construct the auth providers\n    this.emailPasswordAuth = new EmailPasswordAuth(this.fetcher);\n    // Construct the storage\n    const baseStorage = configuration.storage || getEnvironment().defaultStorage;\n    this.storage = new AppStorage(baseStorage, this.id);\n    this.authenticator = new Authenticator(this.fetcher, baseStorage, () => this.deviceInformation);\n    // Hydrate the app state from storage\n    try {\n      this.hydrate();\n    } catch (err) {\n      // The storage was corrupted\n      this.storage.clear();\n      // A failed hydration shouldn't throw and break the app experience\n      // Since this is \"just\" persisted state that unfortunately got corrupted or partially lost\n      console.warn(\"Realm app hydration failed:\", err instanceof Error ? err.message : err);\n    }\n  }\n  /**\n   * Switch user.\n   * @param nextUser The user or id of the user to switch to.\n   */\n  switchUser(nextUser) {\n    const index = this.users.findIndex(u => u === nextUser);\n    if (index === -1) {\n      throw new Error(\"The user was never logged into this app\");\n    }\n    // Remove the user from the stack\n    const [user] = this.users.splice(index, 1);\n    // Insert the user in the beginning of the stack\n    this.users.unshift(user);\n  }\n  /**\n   * Log in a user.\n   * @param credentials Credentials to use when logging in.\n   * @param fetchProfile Should the users profile be fetched? (default: true)\n   * @returns A promise resolving to the newly logged in user.\n   */\n  async logIn(credentials, fetchProfile = true) {\n    if (credentials.reuse) {\n      // TODO: Consider exposing providerName on \"User\" and match against that instead?\n      const existingUser = this.users.find(user => user.providerType === credentials.providerType);\n      if (existingUser) {\n        this.switchUser(existingUser);\n        // If needed, fetch and set the profile on the user\n        if (fetchProfile) {\n          await existingUser.refreshProfile();\n        }\n        return existingUser;\n      }\n    }\n    const response = await this.authenticator.authenticate(credentials);\n    const user = this.createOrUpdateUser(response, credentials.providerType);\n    // Let's ensure this will be the current user, in case the user object was reused.\n    this.switchUser(user);\n    // If needed, fetch and set the profile on the user\n    if (fetchProfile) {\n      await user.refreshProfile();\n    }\n    // Persist the user id in the storage,\n    // merging to avoid overriding logins from other apps using the same underlying storage\n    this.storage.setUserIds(this.users.map(u => u.id), true);\n    // Read out and store the device id from the server\n    const deviceId = response.deviceId;\n    if (deviceId && deviceId !== \"000000000000000000000000\") {\n      this.storage.set(DEVICE_ID_STORAGE_KEY, deviceId);\n    }\n    // Return the user\n    return user;\n  }\n  /**\n   * @inheritdoc\n   */\n  async removeUser(user) {\n    // Remove the user from the list of users\n    const index = this.users.findIndex(u => u === user);\n    if (index === -1) {\n      throw new Error(\"The user was never logged into this app\");\n    }\n    this.users.splice(index, 1);\n    // Log out the user - this removes access and refresh tokens from storage\n    await user.logOut();\n    // Remove the users profile from storage\n    this.storage.remove(`user(${user.id}):profile`);\n    // Remove the user from the storage\n    this.storage.removeUserId(user.id);\n  }\n  /**\n   * @inheritdoc\n   */\n  async deleteUser(user) {\n    await this.fetcher.fetchJSON({\n      method: \"DELETE\",\n      path: routes.api().auth().delete().path\n    });\n    await this.removeUser(user);\n  }\n  /**\n   * @inheritdoc\n   */\n  addListener() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /**\n   * @inheritdoc\n   */\n  removeListener() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /**\n   * @inheritdoc\n   */\n  removeAllListeners() {\n    throw new Error(\"Not yet implemented\");\n  }\n  /**\n   * The currently active user (or null if no active users exists).\n   * @returns the currently active user or null.\n   */\n  get currentUser() {\n    const activeUsers = this.users.filter(user => user.state === UserState.Active);\n    if (activeUsers.length === 0) {\n      return null;\n    } else {\n      // Current user is the top of the stack\n      return activeUsers[0];\n    }\n  }\n  /**\n   * All active and logged-out users:\n   * - First in the list are active users (ordered by most recent call to switchUser or login)\n   * - Followed by logged out users (also ordered by most recent call to switchUser or login).\n   * @returns An array of users active or logged out users (current user being the first).\n   */\n  get allUsers() {\n    // Returning a freezed copy of the list of users to prevent outside changes\n    return Object.fromEntries(this.users.map(user => [user.id, user]));\n  }\n  /**\n   * @returns A promise of the app URL, with the app location resolved.\n   */\n  get locationUrl() {\n    if (!this._locationUrl) {\n      const path = routes.api().app(this.id).location().path;\n      this._locationUrl = this.fetcher.fetchJSON({\n        method: \"GET\",\n        url: this.baseUrl + path,\n        tokenType: \"none\"\n      }).then(body => {\n        if (typeof body !== \"object\") {\n          throw new Error(\"Expected response body be an object\");\n        } else {\n          return body;\n        }\n      }).then(({\n        hostname\n      }) => {\n        if (typeof hostname !== \"string\") {\n          throw new Error(\"Expected response to contain a 'hostname'\");\n        } else {\n          return hostname;\n        }\n      }).catch(err => {\n        // Reset the location to allow another request to fetch again.\n        this._locationUrl = null;\n        throw err;\n      });\n    }\n    return this._locationUrl;\n  }\n  /**\n   * @returns Information about the current device, sent to the server when authenticating.\n   */\n  get deviceInformation() {\n    const deviceIdStr = this.storage.getDeviceId();\n    const deviceId = typeof deviceIdStr === \"string\" && deviceIdStr !== \"000000000000000000000000\" ? new ObjectId(deviceIdStr) : undefined;\n    return new DeviceInformation({\n      appId: this.localApp ? this.localApp.name : undefined,\n      appVersion: this.localApp ? this.localApp.version : undefined,\n      deviceId\n    });\n  }\n  /**\n   * Create (and store) a new user or update an existing user's access and refresh tokens.\n   * This helps de-duplicating users in the list of users known to the app.\n   * @param response A response from the Authenticator.\n   * @param providerType The type of the authentication provider used.\n   * @returns A new or an existing user.\n   */\n  createOrUpdateUser(response, providerType) {\n    const existingUser = this.users.find(u => u.id === response.userId);\n    if (existingUser) {\n      // Update the users access and refresh tokens\n      existingUser.accessToken = response.accessToken;\n      existingUser.refreshToken = response.refreshToken;\n      return existingUser;\n    } else {\n      // Create and store a new user\n      if (!response.refreshToken) {\n        throw new Error(\"No refresh token in response from server\");\n      }\n      const user = new User({\n        app: this,\n        id: response.userId,\n        accessToken: response.accessToken,\n        refreshToken: response.refreshToken,\n        providerType\n      });\n      this.users.unshift(user);\n      return user;\n    }\n  }\n  /**\n   * Restores the state of the app (active and logged-out users) from the storage\n   */\n  hydrate() {\n    const userIds = this.storage.getUserIds();\n    this.users = userIds.map(id => new User({\n      app: this,\n      id\n    }));\n  }\n}\n/**\n * A map of app instances returned from calling getApp.\n */\nApp.appCache = {};\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\nApp.Credentials = Credentials;\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Get or create a singleton Realm App from an id.\n * Calling this function multiple times with the same id will return the same instance.\n * @param id The Realm App id visible from the Atlas App Services UI or a configuration.\n * @returns The Realm App instance.\n */\nfunction getApp(id) {\n  return App.getApp(id);\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Check whether the user's app is running in \"development mode\" (e.g. `npm run dev`\n * for a React app, or `NODE_ENV=development` for a Node app). Each platform's entry\n * point should define the value of this using `setIsDevelopmentMode`.\n * The default behaviour is to always return `false`.\n *\n * @returns true if the user's app is running in development mode, false otherwise\n */\n/**\n * Set the value of `isDevelopmentMode`. This allows each entry point (node vs DOM)\n * to use its own method for determining whether we are in development mode.\n *\n * @param state A boolean indicating whether the user's app is running in\n * development mode or not.\n */\nconst setIsDevelopmentMode = state => {};\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Exports a globalThis which is polyfilled for iOS 11/12\n// From https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst check = function (it) {\n  return it && it.Math == Math && it;\n};\n// eslint-disable-next-line no-restricted-globals\nconst safeGlobalThis =\n// eslint-disable-next-line no-restricted-globals\ncheck(typeof globalThis == \"object\" && globalThis) || check(typeof window == \"object\" && window) ||\n// eslint-disable-next-line no-restricted-globals -- safe\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore allow `self`\ncheck(typeof self == \"object\" && self) ||\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore allow `global`\ncheck(typeof global == \"object\" && global) ||\n// eslint-disable-next-line no-new-func -- fallback\nfunction () {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore allow `this`\n  return this;\n}() || Function(\"return this\")();\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// React/React Native set a global __DEV__ variable when running in dev mode\nsetIsDevelopmentMode(typeof __DEV__ !== \"undefined\" && __DEV__);\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * In-memory storage that will not be persisted.\n */\nclass LocalStorage {\n  /**\n   * Constructs a LocalStorage using the global window.\n   */\n  constructor() {\n    if (typeof safeGlobalThis.localStorage === \"object\") {\n      this.global = safeGlobalThis;\n    } else {\n      throw new Error(\"Cannot use LocalStorage without a global localStorage object\");\n    }\n  }\n  /** @inheritdoc */\n  get(key) {\n    return this.global.localStorage.getItem(key);\n  }\n  /** @inheritdoc */\n  set(key, value) {\n    return this.global.localStorage.setItem(key, value);\n  }\n  /** @inheritdoc */\n  remove(key) {\n    return this.global.localStorage.removeItem(key);\n  }\n  /** @inheritdoc */\n  prefix(keyPart) {\n    return new PrefixedStorage(this, keyPart);\n  }\n  /** @inheritdoc */\n  clear(prefix) {\n    const keys = [];\n    // Iterate all keys to find the once have a matching prefix.\n    for (let i = 0; i < this.global.localStorage.length; i++) {\n      const key = this.global.localStorage.key(i);\n      if (key && (!prefix || key.startsWith(prefix))) {\n        keys.push(key);\n      }\n    }\n    // Remove the items in a seperate loop to avoid updating while iterating.\n    for (const key of keys) {\n      this.global.localStorage.removeItem(key);\n    }\n  }\n  /** @inheritdoc */\n  addListener(listener) {\n    return this.global.addEventListener(\"storage\", listener);\n  }\n  /** @inheritdoc */\n  removeListener(listener) {\n    return this.global.removeEventListener(\"storage\", listener);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst browser = detect();\nconst DefaultStorage = \"localStorage\" in safeGlobalThis ? LocalStorage : MemoryStorage;\n/**\n * Attempt to use the browser to open a window\n * @param url The url to open a window to.\n * @returns Then newly create window.\n */\nfunction openWindow(url) {\n  if (typeof safeGlobalThis.open === \"function\") {\n    return safeGlobalThis.open(url);\n  } else {\n    console.log(`Please open ${url}`);\n    return null;\n  }\n}\nconst environment = {\n  defaultStorage: new DefaultStorage().prefix(\"realm-web\"),\n  openWindow,\n  platform: (browser === null || browser === void 0 ? void 0 : browser.name) || \"web\",\n  platformVersion: (browser === null || browser === void 0 ? void 0 : browser.version) || \"0.0.0\",\n  TextDecoder\n};\nsetEnvironment(environment);\n/**\n * Handle an OAuth 2.0 redirect.\n * @param location An optional location to use (defaults to the windows current location).\n * @param storage Optional storage used to save any results from the location.\n */\nfunction handleAuthRedirect(location = safeGlobalThis.location, storage = environment.defaultStorage) {\n  try {\n    const queryString = location.hash.substr(1); // Strip the initial # from the hash\n    OAuth2Helper.handleRedirect(queryString, storage);\n  } catch (err) {\n    // Ensure calling this never throws: It should not interrupt a users flow.\n    console.warn(err);\n  }\n}\nexport { App, Credentials, DEFAULT_BASE_URL, LocalStorage, MongoDBRealmError, User, UserState, UserType, getApp, getEnvironment, handleAuthRedirect, setEnvironment };","map":{"version":3,"names":["__spreadArray","undefined","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","BrowserInfo","name","version","os","type","NodeInfo","process","platform","SearchBotDeviceInfo","bot","BotInfo","ReactNativeInfo","SEARCHBOX_UA_REGEX","SEARCHBOT_OS_REGEX","REQUIRED_VERSION_PARTS","userAgentRules","operatingSystemRules","detect","userAgent","parseUserAgent","document","navigator","product","getNodeVersion","matchUserAgent","ua","reduce","matched","_a","browser","regex","uaMatch","exec","matchedRule","match","versionParts","split","join","createVersionParts","detectOS","searchBotMatch","ii","count","isNode","output","push","fetch","globalThis","bind","VERSION","_hasatob","atob","_hasbtoa","btoa","_hasBuffer","Buffer","_TD","TextDecoder","_TE","TextEncoder","b64ch","b64chs","b64tab","a","tab","forEach","c","b64re","_fromCC","String","fromCharCode","_U8Afrom","Uint8Array","it","_mkUriSafe","src","replace","m0","_tidyB64","s","btoaPolyfill","bin","u32","c0","c1","c2","asc","pad","charCodeAt","TypeError","substring","_btoa","toString","_fromUint8Array","u8a","maxargs","strs","apply","subarray","fromUint8Array","urlsafe","cb_utob","cc","re_utob","utob","u","_encode","encode","encodeURI","re_btou","cb_btou","cccc","cp","offset","btou","b","atobPolyfill","test","u24","r1","r2","charAt","_atob","_toUint8Array","map","toUint8Array","_unURI","_decode","decode","isValid","_noEnum","v","value","enumerable","writable","configurable","extendString","_add","body","Object","defineProperty","extendUint8Array","extendBuiltins","gBase64","fromBase64","toBase64","encodeURL","SERIALIZATION_OPTIONS","relaxed","serialize","obj","EJSON","deserialize","isArray","doc","UserType$1","UserType","DataKey","DATA_MAPPING","NAME","EMAIL","PICTURE","FIRST_NAME","LAST_NAME","GENDER","BIRTHDAY","MIN_AGE","MAX_AGE","UserProfile","constructor","response","Normal","identities","data","Error","identity","id","provider_type","providerType","mappedData","fromEntries","entries","key","PrefixedStorage","storage","keyPart","get","PART_SEPARATOR","set","remove","prefix","clear","addListener","listener","removeListener","MemoryStorage","listeners","Set","fireListeners","keys","startsWith","add","delete","ACCESS_TOKEN_STORAGE_KEY","REFRESH_TOKEN_STORAGE_KEY","PROFILE_STORAGE_KEY","PROVIDER_TYPE_STORAGE_KEY","UserStorage","userId","accessToken","refreshToken","profile","assign","JSON","parse","stringify","removeKeysWithUndefinedValues","filter","entry","generateRandomString","alphabet","result","Math","floor","random","encodeQueryString","params","prefixed","cleanedParams","k","encodeURIComponent","decodeQueryString","str","cleanStr","substr","kvp","decodeURIComponent","RESERVED_NAMES","getOwnPropertyNames","cleanArgs","args","arg","cleanArgsAndSerialize","cleaned","FunctionsFactory","create","fetcher","config","factory","Proxy","target","p","receiver","indexOf","callFunction","prop","Reflect","serviceName","argsTransformation","service","appRoute","fetchJSON","method","path","functionsCall","callFunctionStreaming","qs","fetchStream","EmailPasswordAuth","providerName","registerUser","details","emailPasswordAuth","register","confirmUser","confirm","resendConfirmationEmail","confirmSend","retryCustomConfirmation","confirmCall","resetPassword","reset","sendResetPasswordEmail","resetSend","callResetPasswordFunction","resetCall","api","app","appId","location","authProvider","login","authProviderRoutes","auth","apiKeys","enable","disable","session","routes","ApiKeyAuth","tokenType","keyId","fetchAll","environment$1","setEnvironment","e","getEnvironment","WatchError","message","code","WatchStreamState","WatchStream","_state","NEED_DATA","_error","_textDecoder","_buffer","_bufferOffset","_eventType","_dataBuffer","feedBuffer","buffer","assertState","stream","advanceBufferState","feedLine","line","endsWith","feedSse","eventType","colon","field","sse","firstPercentIndex","start","percentIndex","encoded","parsed","_nextEvent","HAVE_EVENT","HAVE_ERROR","error_code","errorCode","error","state","nextEvent","out","nextNewlineIndex","MongoDBCollection","databaseName","collectionName","functions","find","options","database","collection","query","project","projection","sort","limit","findOne","findOneAndUpdate","update","upsert","returnNewDocument","findOneAndReplace","replacement","findOneAndDelete","aggregate","pipeline","insertOne","insertMany","documents","deleteOne","deleteMany","updateOne","arrayFilters","updateMany","watch","ids","iterable","iterator","then","Symbol","asyncIterator","watchImpl","originalReturn","return","watchStream","chunk","createCollection","createDatabase","createService","db","DEFAULT_DEVICE_ID","UserState","User","parameters","_accessToken","_refreshToken","_profile","clone","userContext","currentUser","token","allUsers","LoggedOut","Active","Removed","isLoggedIn","customData","decodedToken","decodeAccessToken","userData","deviceId","payload","parsedPayload","refreshProfile","logOut","err","includes","linkCredentials","credentials","authenticator","authenticate","refreshAccessToken","access_token","refreshCustomData","removeAllListeners","toJSON","mongoClient","parts","encodedPayload","decodedPayload","exp","expires","iat","issuedAt","sub","subject","user_data","Credentials","anonymous","reuse","apiKey","emailPassword","email","password","username","function","jwt","google","derivePayload","id_token","idToken","facebook","redirectUrlOrAccessToken","redirectUrl","apple","redirectUrlOrIdToken","USER_IDS_STORAGE_KEY","DEVICE_ID_STORAGE_KEY$1","AppStorage","getUserIds","userIdsString","userIds","setUserIds","mergeWithExisting","existingIds","removeUserId","getDeviceId","setDeviceId","LOWERCASE_LETTERS","CLOSE_CHECK_INTERVAL","REDIRECT_HASH_TO_RESULT","_baas_client_app_id","_baas_ua","_baas_link","_baas_error","_baas_state","OAuth2Helper","parseRedirectLocation","queryString","r","handleRedirect","defaultStorage","oauth2Storage","stateStorage","getStateStorage","decodeAuthInfo","authInfo","openWindow","openWindowAndWaitForRedirect","url","Promise","resolve","reject","redirectWindow","windowClosedInterval","handleStorageUpdate","parsedResult","clearInterval","close","console","warn","setInterval","closed","generateState","REDIRECT_LOCATION_HEADER","Authenticator","getDeviceInformation","oauth2","linkingUser","deviceInformation","isLinking","getLogInUrl","redirect","providerRedirectHeader","device","user","mode","headers","openWindowAndWaitForAuthResponse","logInUrl","user_id","refresh_token","device_id","link","extraQueryParams","loginRoute","locationUrl","redirectResult","userAuth","MongoDBRealmError","fromRequestAndResponse","request","status","statusText","json","statusCode","summary","asyncIteratorFromResponseBody","reader","getReader","next","done","read","cancel","Fetcher","buildAuthorizationHeader","Authorization","buildBody","log","buildJsonHeader","restOfRequest","locationUrlContext","ok","serializedBody","contentTypeHeaders","Accept","contentType","responseBody","DEVICE_ID_STORAGE_KEY","DeviceFields","DeviceInformation","appVersion","sdkVersion","environment","platformVersion","DEFAULT_BASE_URL","App","getApp","appCache","instance","idOrConfiguration","users","_locationUrl","configuration","baseUrl","skipLocationRequest","localApp","baseStorage","hydrate","switchUser","nextUser","index","findIndex","splice","unshift","logIn","fetchProfile","existingUser","createOrUpdateUser","removeUser","deleteUser","activeUsers","hostname","catch","deviceIdStr","ObjectId","setIsDevelopmentMode","check","safeGlobalThis","window","self","global","Function","__DEV__","LocalStorage","localStorage","getItem","setItem","removeItem","addEventListener","removeEventListener","DefaultStorage","open","handleAuthRedirect","hash"],"sources":["C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\detect-browser\\es\\index.js","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\fetch\\dist\\browser\\browser.js","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\js-base64\\base64.mjs","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\utils\\ejson.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\UserProfile.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\storage\\PrefixedStorage.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\storage\\MemoryStorage.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\UserStorage.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\utils\\objects.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\utils\\string.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\FunctionsFactory.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\auth-providers\\EmailPasswordAuth.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\routes.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\auth-providers\\ApiKeyAuth.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\environment.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\services\\MongoDBService\\WatchError.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\services\\MongoDBService\\WatchStream.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\services\\MongoDBService\\MongoDBCollection.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\services\\MongoDBService\\index.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\User.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\Credentials.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\AppStorage.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\OAuth2Helper.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\Authenticator.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\MongoDBRealmError.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\Fetcher.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\DeviceInformation.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\App.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\index.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-common\\dist\\bundle.dom.es.js","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\dom\\LocalStorage.ts","C:\\Users\\ASUS\\OneDrive\\Desktop\\ResponsiveWeb\\onlood-master\\node_modules\\realm-web\\src\\dom\\index.ts"],"sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\nexport { BrowserInfo };\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\nexport { NodeInfo };\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\nexport { SearchBotDeviceInfo };\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\nexport { BotInfo };\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\nexport { ReactNativeInfo };\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['pie', /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/],\n    ['pie', /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/],\n    ['netfront', /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FB[AS]V\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['curl', /^curl\\/([0-9\\.]+)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nexport function detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nexport function browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nexport function parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n    var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nexport function detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nexport function getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2024 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// The sole purpose of this line is to verify types\nconst TypeTest = {};\nTypeTest;\n// To ensure users cannot pass a request body that the platform cannot handle\nTypeTest;\nexport const Headers = globalThis.Headers;\nexport const AbortSignal = globalThis.AbortSignal;\nexport const AbortController = globalThis.AbortController;\n// Binding the function to avoid \"Failed to execute 'fetch' on 'Window': Illegal invocation\".\nexport const fetch = globalThis.fetch.bind(globalThis);\n","/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.6';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { EJSON } from \"bson\";\n\ntype SimpleObject = Record<string, unknown>;\n\nconst SERIALIZATION_OPTIONS = {\n  relaxed: false, // Ensure Canonical mode\n};\n\n/**\n * Serialize an object containing BSON types into extended-JSON.\n * @param obj The object containing BSON types.\n * @returns The document in extended-JSON format.\n */\nexport function serialize<Obj extends SimpleObject>(obj: Obj): SimpleObject {\n  return EJSON.serialize(obj, SERIALIZATION_OPTIONS);\n}\n\n/**\n * De-serialize an object or an array of object from extended-JSON into an object or an array of object with BSON types.\n * @param obj The object or array of objects in extended-JSON format.\n * @returns The object or array of objects with inflated BSON types.\n */\nexport function deserialize(obj: SimpleObject | SimpleObject[]): EJSON.SerializableTypes {\n  if (Array.isArray(obj)) {\n    return obj.map((doc) => EJSON.deserialize(doc));\n  } else {\n    return EJSON.deserialize(obj);\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { deserialize } from \"./utils/ejson\";\n\n/**\n * The type of a user.\n */\nenum UserType {\n  /**\n   * A normal end-user created this user.\n   */\n  Normal = \"normal\",\n  /**\n   * The user was created by the server.\n   */\n  Server = \"server\",\n}\n\n/** @ignore */\nenum DataKey {\n  /** @ignore */\n  NAME = \"name\",\n  /** @ignore */\n  EMAIL = \"email\",\n  /** @ignore */\n  PICTURE = \"picture\",\n  /** @ignore */\n  FIRST_NAME = \"first_name\",\n  /** @ignore */\n  LAST_NAME = \"last_name\",\n  /** @ignore */\n  GENDER = \"gender\",\n  /** @ignore */\n  BIRTHDAY = \"birthday\",\n  /** @ignore */\n  MIN_AGE = \"min_age\",\n  /** @ignore */\n  MAX_AGE = \"max_age\",\n}\n\nconst DATA_MAPPING: { [k in DataKey]: keyof Realm.DefaultUserProfileData } = {\n  [DataKey.NAME]: \"name\",\n  [DataKey.EMAIL]: \"email\",\n  [DataKey.PICTURE]: \"pictureUrl\",\n  [DataKey.FIRST_NAME]: \"firstName\",\n  [DataKey.LAST_NAME]: \"lastName\",\n  [DataKey.GENDER]: \"gender\",\n  [DataKey.BIRTHDAY]: \"birthday\",\n  [DataKey.MIN_AGE]: \"minAge\",\n  [DataKey.MAX_AGE]: \"maxAge\",\n};\n\n/** @inheritdoc */\nexport class UserProfile<UserProfileDataType = Realm.DefaultUserProfileData> {\n  /** @ignore */\n  public readonly type: Realm.UserType = UserType.Normal;\n\n  /** @ignore */\n  public readonly identities: Realm.UserIdentity[] = [];\n\n  /** @ignore */\n  public readonly data: UserProfileDataType;\n\n  /**\n   * @param response The response of a call fetching the users profile.\n   */\n  constructor(response?: unknown) {\n    if (typeof response === \"object\" && response !== null) {\n      const { type, identities, data } = response as {\n        [k: string]: unknown;\n      };\n\n      if (typeof type === \"string\") {\n        this.type = type as UserType;\n      } else {\n        throw new Error(\"Expected 'type' in the response body\");\n      }\n\n      if (Array.isArray(identities)) {\n        this.identities = identities.map((identity: unknown) => {\n          const { id, provider_type: providerType } = identity as Record<string, string>;\n          return { id, providerType } as Realm.UserIdentity;\n        });\n      } else {\n        throw new Error(\"Expected 'identities' in the response body\");\n      }\n\n      if (typeof data === \"object\" && data !== null) {\n        const mappedData = Object.fromEntries(\n          Object.entries(data).map(([key, value]) => {\n            if (key in DATA_MAPPING) {\n              // Translate any known data field to its JS idiomatic alias\n              return [DATA_MAPPING[key as DataKey], value];\n            } else {\n              // Pass through any other values\n              return [key, value];\n            }\n          }),\n        );\n        // We can use `any` since we trust the user supplies the correct type\n        this.data = deserialize(mappedData) as UserProfileDataType;\n      } else {\n        throw new Error(\"Expected 'data' in the response body\");\n      }\n    } else {\n      this.data = {} as UserProfileDataType;\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Storage, StorageChangeListener } from \"./Storage\";\n\n/**\n * A `Storage` which will prefix a key part to every operation.\n */\nexport class PrefixedStorage implements Storage {\n  /**\n   * The string separating two parts.\n   */\n  private static PART_SEPARATOR = \":\";\n\n  /**\n   * The underlying storage to use for operations.\n   */\n  private storage: Storage;\n\n  /**\n   * The part of the key to prefix when performing operations.\n   */\n  private keyPart: string;\n\n  /**\n   * Construct a `Storage` which will prefix a key part to every operation.\n   * @param storage The underlying storage to use for operations.\n   * @param keyPart The part of the key to prefix when performing operations.\n   */\n  constructor(storage: Storage, keyPart: string) {\n    this.storage = storage;\n    this.keyPart = keyPart;\n  }\n\n  /** @inheritdoc */\n  public get(key: string): string | null {\n    return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n  }\n\n  /** @inheritdoc */\n  public set(key: string, value: string): void {\n    return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);\n  }\n\n  /** @inheritdoc */\n  public remove(key: string): void {\n    return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n  }\n\n  /** @inheritdoc */\n  public prefix(keyPart: string): Storage {\n    return new PrefixedStorage(this, keyPart);\n  }\n\n  /** @inheritdoc */\n  public clear(prefix = \"\"): void {\n    return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);\n  }\n\n  /** @inheritdoc */\n  public addListener(listener: StorageChangeListener): void {\n    return this.storage.addListener(listener);\n  }\n\n  /** @inheritdoc */\n  public removeListener(listener: StorageChangeListener): void {\n    return this.storage.addListener(listener);\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Storage, StorageChangeListener } from \"./Storage\";\nimport { PrefixedStorage } from \"./PrefixedStorage\";\n\n/**\n * In-memory storage that will not be persisted.\n */\nexport class MemoryStorage implements Storage {\n  /**\n   * Internal state of the storage.\n   */\n  private readonly storage: { [key: string]: string } = {};\n\n  /**\n   * A set of listners.\n   */\n  private readonly listeners: Set<StorageChangeListener> = new Set();\n\n  /** @inheritdoc */\n  public get(key: string): string | null {\n    if (key in this.storage) {\n      return this.storage[key];\n    } else {\n      return null;\n    }\n  }\n\n  /** @inheritdoc */\n  public set(key: string, value: string): void {\n    this.storage[key] = value;\n    // Fire the listeners\n    this.fireListeners();\n  }\n\n  /** @inheritdoc */\n  public remove(key: string): void {\n    delete this.storage[key];\n    // Fire the listeners\n    this.fireListeners();\n  }\n\n  /** @inheritdoc */\n  public prefix(keyPart: string): Storage {\n    return new PrefixedStorage(this, keyPart);\n  }\n\n  /** @inheritdoc */\n  public clear(prefix?: string): void {\n    // Iterate all keys and delete their values if they have a matching prefix\n    for (const key of Object.keys(this.storage)) {\n      if (!prefix || key.startsWith(prefix)) {\n        delete this.storage[key];\n      }\n    }\n    // Fire the listeners\n    this.fireListeners();\n  }\n\n  /** @inheritdoc */\n  public addListener(listener: StorageChangeListener): void {\n    this.listeners.add(listener);\n  }\n\n  /** @inheritdoc */\n  public removeListener(listener: StorageChangeListener): void {\n    this.listeners.delete(listener);\n  }\n\n  /**\n   * Tell the listeners that a change occurred.\n   */\n  private fireListeners() {\n    this.listeners.forEach((listener) => listener());\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { PrefixedStorage, Storage } from \"./storage\";\nimport { UserProfile } from \"./UserProfile\";\nimport { ProviderType } from \"./Credentials\";\n\nconst ACCESS_TOKEN_STORAGE_KEY = \"accessToken\";\nconst REFRESH_TOKEN_STORAGE_KEY = \"refreshToken\";\nconst PROFILE_STORAGE_KEY = \"profile\";\nconst PROVIDER_TYPE_STORAGE_KEY = \"providerType\";\n\n/**\n * Storage specific to the app.\n */\nexport class UserStorage<UserProfileDataType = Realm.DefaultUserProfileData> extends PrefixedStorage {\n  /**\n   * Construct a storage for a `User`.\n   * @param storage The underlying storage to wrap.\n   * @param userId The id of the user.\n   */\n  constructor(storage: Storage, userId: string) {\n    super(storage, `user(${userId})`);\n  }\n\n  /**\n   * Get the access token from storage.\n   * @returns Access token (null if unknown).\n   */\n  get accessToken(): string | null {\n    return this.get(ACCESS_TOKEN_STORAGE_KEY);\n  }\n\n  /**\n   * Set the access token in storage.\n   * @param value Access token (null if unknown).\n   */\n  set accessToken(value: string | null) {\n    if (value === null) {\n      this.remove(ACCESS_TOKEN_STORAGE_KEY);\n    } else {\n      this.set(ACCESS_TOKEN_STORAGE_KEY, value);\n    }\n  }\n\n  /**\n   * Get the refresh token from storage.\n   * @returns Refresh token (null if unknown and user is logged out).\n   */\n  get refreshToken(): string | null {\n    return this.get(REFRESH_TOKEN_STORAGE_KEY);\n  }\n\n  /**\n   * Set the refresh token in storage.\n   * @param value Refresh token (null if unknown and user is logged out).\n   */\n  set refreshToken(value: string | null) {\n    if (value === null) {\n      this.remove(REFRESH_TOKEN_STORAGE_KEY);\n    } else {\n      this.set(REFRESH_TOKEN_STORAGE_KEY, value);\n    }\n  }\n\n  /**\n   * Get the user profile from storage.\n   * @returns User profile (undefined if its unknown).\n   */\n  get profile(): UserProfile<UserProfileDataType> | undefined {\n    const value = this.get(PROFILE_STORAGE_KEY);\n    if (value) {\n      const profile = new UserProfile<UserProfileDataType>();\n      // Patch in the values\n      Object.assign(profile, JSON.parse(value));\n      return profile;\n    }\n  }\n\n  /**\n   * Set the user profile in storage.\n   * @param value User profile (undefined if its unknown).\n   */\n  set profile(value: UserProfile<UserProfileDataType> | undefined) {\n    if (value) {\n      this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));\n    } else {\n      this.remove(PROFILE_STORAGE_KEY);\n    }\n  }\n\n  /**\n   * Get the type of authentication provider used to authenticate\n   * @returns User profile (undefined if its unknown).\n   */\n  get providerType(): ProviderType | undefined {\n    const value = this.get(PROVIDER_TYPE_STORAGE_KEY);\n    if (value) {\n      return value as ProviderType;\n    }\n  }\n\n  /**\n   * Set the type of authentication provider used to authenticate\n   * @param value Type of authentication provider.\n   */\n  set providerType(value: ProviderType | undefined) {\n    if (value) {\n      this.set(PROVIDER_TYPE_STORAGE_KEY, value);\n    } else {\n      this.remove(PROVIDER_TYPE_STORAGE_KEY);\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * @param obj The object to remove keys (and undefined values from)\n * @returns A new object without the keys where the value is undefined.\n */\nexport function removeKeysWithUndefinedValues<T extends Record<string, unknown>>(obj: T): T {\n  return Object.fromEntries(Object.entries(obj).filter((entry) => typeof entry[1] !== \"undefined\")) as T;\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { removeKeysWithUndefinedValues } from \"./objects\";\n\n/**\n * Generate a random sequence of characters.\n * @param length The length of the string.\n * @param alphabet The alphabet of characters to pick from.\n * @returns A string of characters picked randomly from `alphabet`.\n */\nexport function generateRandomString(length: number, alphabet: string): string {\n  let result = \"\";\n  for (let i = 0; i < length; i++) {\n    result += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n  return result;\n}\n\n/** Parameters passed in a query string */\nexport type QueryParams = {\n  [key: string]: string | number | boolean;\n};\n\n/**\n * Encode an object mapping from string to string, into a query string to be appended a URL.\n * @param params The parameters to include in the string.\n * @param prefixed Should the \"?\" prefix be added if values exists?\n * @returns A URL encoded representation of the parameters (omitting a \"?\" prefix).\n */\nexport function encodeQueryString<P extends Partial<QueryParams>>(params: P, prefixed = true): string {\n  // Filter out undefined values\n  const cleanedParams = removeKeysWithUndefinedValues(params) as QueryParams;\n  // Determine if a prefixed \"?\" is appropreate\n  const prefix = prefixed && Object.keys(cleanedParams).length > 0 ? \"?\" : \"\";\n  // Transform keys and values to a query string\n  return (\n    prefix +\n    Object.entries(cleanedParams)\n      .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)\n      .join(\"&\")\n  );\n}\n\n/**\n * Decodes a query string into an object.\n * @param str The query string to decode.\n * @returns The decoded query string.\n */\nexport function decodeQueryString(str: string): Record<string, string> {\n  const cleanStr = str[0] === \"?\" ? str.substr(1) : str;\n  return Object.fromEntries(\n    cleanStr\n      .split(\"&\")\n      .filter((s) => s.length > 0)\n      .map((kvp) => kvp.split(\"=\"))\n      .map(([k, v]) => [k, decodeURIComponent(v)]),\n  );\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Base64 } from \"js-base64\";\n\nimport { Fetcher } from \"./Fetcher\";\nimport { serialize } from \"./utils/ejson\";\nimport { encodeQueryString } from \"./utils/string\";\n\n/**\n * A list of names that functions cannot have to be callable through the functions proxy.\n */\nconst RESERVED_NAMES = [\n  \"inspect\",\n  \"callFunction\",\n  \"callFunctionStreaming\",\n  // Methods defined on the Object.prototype might be \"typeof probed\" and called by libraries and runtime environments.\n  ...Object.getOwnPropertyNames(Object.prototype),\n];\n\ntype SimpleObject = Record<string, unknown>;\n\n/**\n * The body of the request sent to call a remote function.\n */\ninterface CallFunctionBody {\n  /**\n   * Name of the function.\n   */\n  name: string;\n  /**\n   * An array of arguments to pass to the function.\n   */\n  arguments: unknown[];\n  /**\n   * An optional name of the service in which the function is defined.\n   */\n  service?: string;\n}\n\n/**\n * Pass an object implementing this interface when constructing a functions factory.\n */\nexport interface FunctionsFactoryConfiguration {\n  /**\n   * An optional name of the service in which functions are defined.\n   */\n  serviceName?: string;\n  /**\n   * Call this function to transform the arguments before they're sent to the service.\n   */\n  argsTransformation?: (args: unknown[]) => unknown[];\n}\n\n/**\n * Remove the key for any fields with undefined values.\n * @param args The arguments to clean.\n * @returns The cleaned arguments.\n */\nexport function cleanArgs(args: unknown[]): typeof args {\n  for (const arg of args) {\n    if (typeof arg === \"object\" && arg) {\n      for (const [key, value] of Object.entries(arg)) {\n        if (value === undefined) {\n          delete (arg as SimpleObject)[key];\n        }\n      }\n    }\n  }\n  return args;\n}\n\n/**\n * Remove keys for any undefined values and serialize to EJSON.\n * @param args The arguments to clean and serialize.\n * @returns The cleaned and serialized arguments.\n */\nfunction cleanArgsAndSerialize(args: unknown[]) {\n  const cleaned = cleanArgs(args);\n  return cleaned.map((arg) => (typeof arg === \"object\" ? serialize(arg as SimpleObject) : arg));\n}\n\n/**\n * Defines how functions are called.\n */\nexport class FunctionsFactory {\n  /**\n   * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.\n   * @param fetcher The underlying fetcher to use when requesting.\n   * @param config Additional configuration parameters.\n   * @returns The newly created factory of functions.\n   */\n  public static create<FunctionsFactoryType extends SimpleObject = Realm.DefaultFunctionsFactory>(\n    fetcher: Fetcher,\n    config: FunctionsFactoryConfiguration = {},\n  ): FunctionsFactoryType & Realm.BaseFunctionsFactory {\n    // Create a proxy, wrapping a simple object returning methods that calls functions\n    // TODO: Lazily fetch available functions and return these from the ownKeys() trap\n    const factory: Realm.BaseFunctionsFactory = new FunctionsFactory(fetcher, config);\n    // Wrap the factory in a proxy that calls the internal call method\n    return new Proxy(factory, {\n      get(target, p, receiver) {\n        if (typeof p === \"string\" && RESERVED_NAMES.indexOf(p) === -1) {\n          return target.callFunction.bind(target, p);\n        } else {\n          const prop = Reflect.get(target, p, receiver);\n          return typeof prop === \"function\" ? prop.bind(target) : prop;\n        }\n      },\n    }) as FunctionsFactoryType & typeof factory;\n  }\n\n  /**\n   * The underlying fetcher to use when requesting.\n   */\n  private readonly fetcher: Fetcher;\n\n  /**\n   * An optional name of the service in which functions are defined.\n   */\n  private readonly serviceName?: string;\n\n  /**\n   * Call this function to transform the arguments before they're sent to the service.\n   */\n  private readonly argsTransformation?: (args: unknown[]) => unknown[];\n\n  /**\n   * @param fetcher The underlying fetcher to use when sending requests.\n   * @param config Additional configuration parameters.\n   */\n  constructor(fetcher: Fetcher, config: FunctionsFactoryConfiguration = {}) {\n    this.fetcher = fetcher;\n    this.serviceName = config.serviceName;\n    this.argsTransformation = config.argsTransformation || cleanArgsAndSerialize;\n  }\n\n  /**\n   * Call a remote function by it's name.\n   * @param name Name of the remote function.\n   * @param args Arguments to pass to the remote function.\n   * @returns A promise of the value returned when executing the remote function.\n   */\n  async callFunction(name: string, ...args: unknown[]): Promise<unknown> {\n    // See https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/sdk/src/services/internal/CoreStitchServiceClientImpl.ts\n    const body: CallFunctionBody = {\n      name,\n      arguments: this.argsTransformation ? this.argsTransformation(args) : args,\n    };\n    if (this.serviceName) {\n      body.service = this.serviceName;\n    }\n    const appRoute = this.fetcher.appRoute;\n    return this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.functionsCall().path,\n      body,\n    });\n  }\n\n  /**\n   * Call a remote function by it's name.\n   * @param name Name of the remote function.\n   * @param args Arguments to pass to the remote function.\n   * @returns A promise of the value returned when executing the remote function.\n   */\n  public callFunctionStreaming(name: string, ...args: unknown[]): Promise<AsyncIterable<Uint8Array>> {\n    const body: CallFunctionBody = {\n      name,\n      arguments: this.argsTransformation ? this.argsTransformation(args) : args,\n    };\n    if (this.serviceName) {\n      body.service = this.serviceName;\n    }\n    const appRoute = this.fetcher.appRoute;\n    const qs = encodeQueryString({\n      [\"baas_request\"]: Base64.encode(JSON.stringify(body)),\n    });\n    return this.fetcher.fetchStream({\n      method: \"GET\",\n      path: appRoute.functionsCall().path + qs,\n    });\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Fetcher } from \"../Fetcher\";\n\n/** @inheritdoc */\nexport class EmailPasswordAuth implements Realm.Auth.EmailPasswordAuth {\n  private readonly fetcher: Fetcher;\n  private readonly providerName: string;\n\n  /**\n   * Construct an interface to the email / password authentication provider.\n   * @param fetcher The underlying fetcher used to request the services.\n   * @param providerName Optional custom name of the authentication provider.\n   */\n  constructor(fetcher: Fetcher, providerName = \"local-userpass\") {\n    this.fetcher = fetcher;\n    this.providerName = providerName;\n  }\n\n  /** @inheritdoc */\n  async registerUser(details: Realm.Auth.RegisterUserDetails): Promise<void> {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).register().path,\n      body: details,\n    });\n  }\n\n  /** @inheritdoc */\n  async confirmUser(details: Realm.Auth.ConfirmUserDetails): Promise<void> {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).confirm().path,\n      body: details,\n    });\n  }\n\n  /** @inheritdoc */\n  async resendConfirmationEmail(details: Realm.Auth.ResendConfirmationDetails): Promise<void> {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).confirmSend().path,\n      body: details,\n    });\n  }\n\n  /** @inheritdoc */\n  async retryCustomConfirmation(details: Realm.Auth.RetryCustomConfirmationDetails): Promise<void> {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).confirmCall().path,\n      body: details,\n    });\n  }\n\n  /** @inheritdoc */\n  async resetPassword(details: Realm.Auth.ResetPasswordDetails): Promise<void> {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).reset().path,\n      body: details,\n    });\n  }\n\n  /** @inheritdoc */\n  async sendResetPasswordEmail(details: Realm.Auth.SendResetPasswordDetails): Promise<void> {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).resetSend().path,\n      body: details,\n    });\n  }\n\n  /** @inheritdoc */\n  async callResetPasswordFunction(\n    details: Realm.Auth.CallResetPasswordFunctionDetails,\n    ...args: unknown[]\n  ): Promise<void> {\n    const appRoute = this.fetcher.appRoute;\n    await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: appRoute.emailPasswordAuth(this.providerName).resetCall().path,\n      body: { ...details, arguments: args },\n    });\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * @returns The base api route.\n */\nfunction api() {\n  return {\n    path: \"/api/client/v2.0\",\n    /**\n     * @param appId The id of the app.\n     * @returns The URL of the app endpoint.\n     */\n    app(appId: string) {\n      return {\n        path: this.path + `/app/${appId}`,\n        /**\n         * @returns The URL of the app location endpoint.\n         */\n        location() {\n          return {\n            path: this.path + \"/location\",\n          };\n        },\n        /**\n         * @param providerName The name of the provider.\n         * @returns The app url concatinated with the /auth/providers/{providerName}\n         */\n        authProvider(providerName: string) {\n          return {\n            path: this.path + `/auth/providers/${providerName}`,\n            /**\n             * @returns Get the URL of an authentication provider.\n             */\n            login() {\n              return { path: this.path + \"/login\" };\n            },\n          };\n        },\n        /**\n         * @param providerName The name of the provider.\n         * @returns The app url concatinated with the /auth/providers/{providerName}\n         */\n        emailPasswordAuth(providerName: string) {\n          const authProviderRoutes = this.authProvider(providerName);\n          return {\n            ...authProviderRoutes,\n            register() {\n              return { path: this.path + \"/register\" };\n            },\n            confirm() {\n              return { path: this.path + \"/confirm\" };\n            },\n            confirmSend() {\n              return { path: this.path + \"/confirm/send\" };\n            },\n            confirmCall() {\n              return { path: this.path + \"/confirm/call\" };\n            },\n            reset() {\n              return { path: this.path + \"/reset\" };\n            },\n            resetSend() {\n              return { path: this.path + \"/reset/send\" };\n            },\n            resetCall() {\n              return { path: this.path + \"/reset/call\" };\n            },\n          };\n        },\n        functionsCall() {\n          return {\n            path: this.path + \"/functions/call\",\n          };\n        },\n      };\n    },\n    auth() {\n      return {\n        path: this.path + \"/auth\",\n        apiKeys() {\n          return {\n            path: this.path + \"/api_keys\",\n            key(id: string) {\n              return {\n                path: this.path + `/${id}`,\n                enable() {\n                  return { path: this.path + \"/enable\" };\n                },\n                disable() {\n                  return { path: this.path + \"/disable\" };\n                },\n              };\n            },\n          };\n        },\n        profile() {\n          return { path: this.path + \"/profile\" };\n        },\n        session() {\n          return { path: this.path + \"/session\" };\n        },\n        delete() {\n          return { path: this.path + \"/delete\" };\n        },\n      };\n    },\n  };\n}\n\nexport default { api };\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Fetcher } from \"../Fetcher\";\nimport routes from \"../routes\";\n\n/** @inheritdoc */\nexport class ApiKeyAuth implements Realm.Auth.ApiKeyAuth {\n  /**\n   * The fetcher used to send requests to services.\n   */\n  private readonly fetcher: Fetcher;\n\n  /**\n   * Construct an interface to the API-key authentication provider.\n   * @param fetcher The fetcher used to send requests to services.\n   */\n  constructor(fetcher: Fetcher) {\n    this.fetcher = fetcher;\n  }\n\n  /** @inheritdoc */\n  create(name: string): Promise<Realm.Auth.ApiKey> {\n    return this.fetcher.fetchJSON({\n      method: \"POST\",\n      body: { name },\n      path: routes.api().auth().apiKeys().path,\n      tokenType: \"refresh\",\n    });\n  }\n\n  /** @inheritdoc */\n  fetch(keyId: string): Promise<Realm.Auth.ApiKey> {\n    return this.fetcher.fetchJSON({\n      method: \"GET\",\n      path: routes.api().auth().apiKeys().key(keyId).path,\n      tokenType: \"refresh\",\n    });\n  }\n\n  /** @inheritdoc */\n  fetchAll(): Promise<Realm.Auth.ApiKey[]> {\n    return this.fetcher.fetchJSON({\n      method: \"GET\",\n      tokenType: \"refresh\",\n      path: routes.api().auth().apiKeys().path,\n    });\n  }\n\n  /** @inheritdoc */\n  async delete(keyId: string): Promise<void> {\n    await this.fetcher.fetchJSON({\n      method: \"DELETE\",\n      path: routes.api().auth().apiKeys().key(keyId).path,\n      tokenType: \"refresh\",\n    });\n  }\n\n  /** @inheritdoc */\n  async enable(keyId: string): Promise<void> {\n    await this.fetcher.fetchJSON({\n      method: \"PUT\",\n      path: routes.api().auth().apiKeys().key(keyId).enable().path,\n      tokenType: \"refresh\",\n    });\n  }\n\n  /** @inheritdoc */\n  async disable(keyId: string): Promise<void> {\n    await this.fetcher.fetchJSON({\n      method: \"PUT\",\n      path: routes.api().auth().apiKeys().key(keyId).disable().path,\n      tokenType: \"refresh\",\n    });\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Storage } from \"./storage\";\nimport { Window } from \"./OAuth2Helper\";\n\n/**\n * Helps decode buffers into strings of various encodings.\n */\ndeclare class TextDecoder {\n  decode(buffer: Uint8Array, options?: { stream: boolean }): string;\n}\n\n/** An object with values specific to the runtime environment. */\nexport type Environment = {\n  /**\n   * The default storage instance on the environment.\n   */\n  defaultStorage: Storage;\n\n  /**\n   * Open a browser window.\n   */\n  openWindow: (url: string) => Window | null;\n\n  /**\n   * The name of the executing platform.\n   */\n  platform: string;\n\n  /**\n   * The version of the executing platform.\n   */\n  platformVersion: string;\n\n  /**\n   * Helps decode buffers into strings of various encodings.\n   */\n  TextDecoder: typeof TextDecoder;\n};\n\nlet environment: Environment | null = null;\n\n/**\n * Set the environment of execution.\n * Note: This should be called as the first thing before executing any code which calls getEnvironment()\n * @param e An object containing environment specific implementations.\n */\nexport function setEnvironment(e: Environment): void {\n  environment = e;\n}\n\n/**\n * Get the environment of execution.\n * @returns An object containing environment specific implementations.\n */\nexport function getEnvironment(): Environment {\n  if (environment) {\n    return environment;\n  } else {\n    throw new Error(\"Cannot get environment before it's set\");\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\ntype WatchErrorParameters = {\n  message: string;\n  code: string;\n};\n\n/**\n * An error occured during the parsing of a watch stream.\n */\nexport class WatchError extends Error {\n  /**\n   * The name of this type of error\n   */\n  public readonly name = \"WatchError\";\n\n  /**\n   * An code associated with the type of error.\n   */\n  public readonly code: string;\n\n  constructor({ message, code }: WatchErrorParameters) {\n    super(message);\n    this.code = code;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { EJSON } from \"bson\";\n\nimport { getEnvironment } from \"../../environment\";\nimport { WatchError } from \"./WatchError\";\n\ntype Document = Realm.Services.MongoDB.Document;\ntype ChangeEvent<T extends Document> = Realm.Services.MongoDB.ChangeEvent<T>;\n\ntype ServerSentEvent = {\n  data: string;\n  eventType?: string;\n};\n\n// NOTE: this is a fully processed event, not a single \"data: foo\" line!\n/**\n * The state of a WatchStream.\n */\nexport enum WatchStreamState {\n  /**\n   * Need to call one of the feed functions.\n   */\n  NEED_DATA = \"NEED_DATA\",\n  /**\n   * Call nextEvent() to consume an event.\n   */\n  HAVE_EVENT = \"HAVE_EVENT\",\n  /**\n   * Call error().\n   */\n  HAVE_ERROR = \"HAVE_ERROR\",\n}\n\n/**\n * Represents a stream of events\n */\nexport class WatchStream<T extends Document = Document> {\n  // Call these when you have data, in whatever shape is easiest for your SDK to get.\n  // Pick one, mixing and matching on a single instance isn't supported.\n  // These can only be called in NEED_DATA state, which is the initial state.\n  feedBuffer(buffer: Uint8Array): void {\n    this.assertState(WatchStreamState.NEED_DATA);\n    this._buffer += this._textDecoder.decode(buffer, { stream: true });\n    this.advanceBufferState();\n  }\n\n  feedLine(line: string): void {\n    this.assertState(WatchStreamState.NEED_DATA);\n    // This is an implementation of the algorithm described at\n    // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation.\n    // Currently the server does not use id or retry lines, so that processing isn't implemented.\n\n    // ignore trailing LF if not removed by SDK.\n    if (line.endsWith(\"\\n\")) line = line.substr(0, line.length - 1);\n\n    // ignore trailing CR from CRLF\n    if (line.endsWith(\"\\r\")) line = line.substr(0, line.length - 1);\n\n    if (line.length === 0) {\n      // This is the \"dispatch the event\" portion of the algorithm.\n      if (this._dataBuffer.length === 0) {\n        this._eventType = \"\";\n        return;\n      }\n\n      if (this._dataBuffer.endsWith(\"\\n\")) this._dataBuffer = this._dataBuffer.substr(0, this._dataBuffer.length - 1);\n\n      this.feedSse({\n        data: this._dataBuffer,\n        eventType: this._eventType,\n      });\n      this._dataBuffer = \"\";\n      this._eventType = \"\";\n    }\n\n    if (line[0] === \":\") return;\n\n    const colon = line.indexOf(\":\");\n    const field = line.substr(0, colon);\n    let value = colon === -1 ? \"\" : line.substr(colon + 1);\n    if (value.startsWith(\" \")) value = value.substr(1);\n\n    if (field === \"event\") {\n      this._eventType = value;\n    } else if (field === \"data\") {\n      this._dataBuffer += value;\n      this._dataBuffer += \"\\n\";\n    } else {\n      // line is ignored (even if field is id or retry).\n    }\n  }\n\n  feedSse(sse: ServerSentEvent): void {\n    this.assertState(WatchStreamState.NEED_DATA);\n    const firstPercentIndex = sse.data.indexOf(\"%\");\n    if (firstPercentIndex !== -1) {\n      // For some reason, the stich server decided to add percent-encoding for '%', '\\n', and '\\r' to its\n      // event-stream replies. But it isn't real urlencoding, since most characters pass through, so we can't use\n      // uri_percent_decode() here.\n      let buffer = \"\";\n      let start = 0;\n      for (let percentIndex = firstPercentIndex; percentIndex !== -1; percentIndex = sse.data.indexOf(\"%\", start)) {\n        buffer += sse.data.substr(start, percentIndex - start);\n\n        const encoded = sse.data.substr(percentIndex, 3); // may be smaller than 3 if string ends with %\n        if (encoded === \"%25\") {\n          buffer += \"%\";\n        } else if (encoded === \"%0A\") {\n          buffer += \"\\x0A\"; // '\\n'\n        } else if (encoded === \"%0D\") {\n          buffer += \"\\x0D\"; // '\\r'\n        } else {\n          buffer += encoded; // propagate as-is\n        }\n        start = percentIndex + encoded.length;\n      }\n\n      // Advance the buffer with the last part\n      buffer += sse.data.substr(start);\n\n      sse.data = buffer;\n    }\n\n    if (!sse.eventType || sse.eventType === \"message\") {\n      try {\n        const parsed = EJSON.parse(sse.data);\n        if (typeof parsed === \"object\") {\n          // ???\n          this._nextEvent = parsed as ChangeEvent<T>;\n          this._state = WatchStreamState.HAVE_EVENT;\n          return;\n        }\n      } catch {\n        // fallthrough to same handling as for non-document value.\n      }\n      this._state = WatchStreamState.HAVE_ERROR;\n      this._error = new WatchError({\n        message: \"server returned malformed event: \" + sse.data,\n        code: \"bad bson parse\",\n      });\n    } else if (sse.eventType === \"error\") {\n      this._state = WatchStreamState.HAVE_ERROR;\n\n      // default error message if we have issues parsing the reply.\n      this._error = new WatchError({\n        message: sse.data,\n        code: \"unknown\",\n      });\n      try {\n        const { error_code: errorCode, error } = EJSON.parse(sse.data) as Record<string, string>;\n        if (typeof errorCode !== \"string\") return;\n        if (typeof error !== \"string\") return;\n        // XXX in realm-js, object-store will error if the error_code is not one of the known\n        // error code enum values.\n        this._error = new WatchError({\n          message: error,\n          code: errorCode,\n        });\n      } catch {\n        return; // Use the default state.\n      }\n    } else {\n      // Ignore other event types\n    }\n  }\n\n  get state(): WatchStreamState {\n    return this._state;\n  }\n\n  // Consumes the returned event. If you used feedBuffer(), there may be another event or error after this one,\n  // so you need to call state() again to see what to do next.\n  nextEvent(): ChangeEvent<T> {\n    this.assertState(WatchStreamState.HAVE_EVENT);\n    // We can use \"as ChangeEvent<T>\" since we just asserted the state.\n    const out = this._nextEvent as ChangeEvent<T>;\n    this._state = WatchStreamState.NEED_DATA;\n    this.advanceBufferState();\n    return out;\n  }\n\n  // Once this enters the error state, it stays that way. You should not feed any more data.\n  get error(): WatchError | null {\n    return this._error;\n  }\n\n  ////////////////////////////////////////////\n\n  private advanceBufferState() {\n    this.assertState(WatchStreamState.NEED_DATA);\n    while (this.state === WatchStreamState.NEED_DATA) {\n      if (this._bufferOffset === this._buffer.length) {\n        this._buffer = \"\";\n        this._bufferOffset = 0;\n        return;\n      }\n\n      // NOTE not supporting CR-only newlines, just LF and CRLF.\n      const nextNewlineIndex = this._buffer.indexOf(\"\\n\", this._bufferOffset);\n      if (nextNewlineIndex === -1) {\n        // We have a partial line.\n        if (this._bufferOffset !== 0) {\n          // Slide the partial line down to the front of the buffer.\n          this._buffer = this._buffer.substr(this._bufferOffset, this._buffer.length - this._bufferOffset);\n          this._bufferOffset = 0;\n        }\n        return;\n      }\n\n      this.feedLine(this._buffer.substr(this._bufferOffset, nextNewlineIndex - this._bufferOffset));\n      this._bufferOffset = nextNewlineIndex + 1; // Advance past this line, including its newline.\n    }\n  }\n\n  private assertState(state: WatchStreamState) {\n    if (this._state !== state) {\n      throw Error(`Expected WatchStream to be in state ${state}, but in state ${this._state}`);\n    }\n  }\n\n  private _nextEvent: ChangeEvent<T> | undefined;\n\n  private _state: WatchStreamState = WatchStreamState.NEED_DATA;\n\n  private _error: WatchError | null = null;\n\n  // Used by feedBuffer to construct lines\n  private _textDecoder = new (getEnvironment().TextDecoder)();\n  private _buffer = \"\";\n  private _bufferOffset = 0;\n\n  // Used by feedLine for building the next SSE\n  private _eventType = \"\";\n  private _dataBuffer = \"\";\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Fetcher } from \"../../Fetcher\";\nimport { FunctionsFactory } from \"../../FunctionsFactory\";\n\nimport { WatchStream, WatchStreamState } from \"./WatchStream\";\n\ntype Document = Realm.Services.MongoDB.Document;\ntype NewDocument<T extends Document> = Realm.Services.MongoDB.NewDocument<T>;\ntype ChangeEvent<T extends Document> = Realm.Services.MongoDB.ChangeEvent<T>;\ntype InsertOneResult<IdType> = Realm.Services.MongoDB.InsertOneResult<IdType>;\ntype InsertManyResult<IdType> = Realm.Services.MongoDB.InsertManyResult<IdType>;\ntype DeleteResult = Realm.Services.MongoDB.DeleteResult;\ntype UpdateResult<IdType> = Realm.Services.MongoDB.UpdateResult<IdType>;\n\n/**\n * A remote collection of documents.\n */\nexport class MongoDBCollection<T extends Document> implements Realm.Services.MongoDB.MongoDBCollection<T> {\n  /**\n   * The function factory to use when sending requests to the service.\n   */\n  private functions: Realm.DefaultFunctionsFactory;\n\n  /**\n   * The name of the database.\n   */\n  private readonly databaseName: string;\n\n  /**\n   * The name of the collection.\n   */\n  private readonly collectionName: string;\n\n  private readonly serviceName: string;\n  private readonly fetcher: Fetcher;\n\n  /**\n   * Construct a remote collection of documents.\n   * @param fetcher The fetcher to use when requesting the service.\n   * @param serviceName The name of the remote service.\n   * @param databaseName The name of the database.\n   * @param collectionName The name of the remote collection.\n   */\n  constructor(fetcher: Fetcher, serviceName: string, databaseName: string, collectionName: string) {\n    this.functions = FunctionsFactory.create(fetcher, {\n      serviceName,\n    });\n    this.databaseName = databaseName;\n    this.collectionName = collectionName;\n    this.serviceName = serviceName;\n    this.fetcher = fetcher;\n  }\n\n  /** @inheritdoc */\n  find(filter: Realm.Services.MongoDB.Filter = {}, options: Realm.Services.MongoDB.FindOptions = {}): Promise<T[]> {\n    return this.functions.find({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort,\n      limit: options.limit,\n    });\n  }\n\n  /** @inheritdoc */\n  findOne(\n    filter: Realm.Services.MongoDB.Filter = {},\n    options: Realm.Services.MongoDB.FindOneOptions = {},\n  ): Promise<T | null> {\n    return this.functions.findOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort,\n    });\n  }\n\n  /** @inheritdoc */\n  findOneAndUpdate(\n    filter: Realm.Services.MongoDB.Filter = {},\n    update: Realm.Services.MongoDB.Update,\n    options: Realm.Services.MongoDB.FindOneAndModifyOptions = {},\n  ): Promise<T | null> {\n    return this.functions.findOneAndUpdate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter,\n      update,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument,\n    });\n  }\n\n  /** @inheritdoc */\n  findOneAndReplace(\n    filter: Realm.Services.MongoDB.Filter = {},\n    replacement: NewDocument<T>,\n    options: Realm.Services.MongoDB.FindOneAndModifyOptions = {},\n  ): Promise<T | null> {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter: filter,\n      update: replacement,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument,\n    });\n  }\n\n  /** @inheritdoc */\n  findOneAndDelete(\n    filter: Realm.Services.MongoDB.Filter = {},\n    options: Realm.Services.MongoDB.FindOneOptions = {},\n  ): Promise<T | null> {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter,\n      sort: options.sort,\n      projection: options.projection,\n    });\n  }\n\n  /** @inheritdoc */\n  aggregate(pipeline: Realm.Services.MongoDB.AggregatePipelineStage[]): Promise<unknown> {\n    return this.functions.aggregate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      pipeline,\n    });\n  }\n\n  /** @inheritdoc */\n  count(\n    filter: Realm.Services.MongoDB.Filter = {},\n    options: Realm.Services.MongoDB.CountOptions = {},\n  ): Promise<number> {\n    return this.functions.count({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      limit: options.limit,\n    });\n  }\n\n  /** @inheritdoc */\n  insertOne(document: NewDocument<T>): Promise<InsertOneResult<T[\"_id\"]>> {\n    return this.functions.insertOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      document,\n    });\n  }\n\n  /** @inheritdoc */\n  insertMany(documents: NewDocument<T>[]): Promise<InsertManyResult<T[\"_id\"]>> {\n    return this.functions.insertMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      documents,\n    });\n  }\n\n  /** @inheritdoc */\n  deleteOne(filter: Realm.Services.MongoDB.Filter = {}): Promise<DeleteResult> {\n    return this.functions.deleteOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n    });\n  }\n\n  /** @inheritdoc */\n  deleteMany(filter: Realm.Services.MongoDB.Filter = {}): Promise<DeleteResult> {\n    return this.functions.deleteMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n    });\n  }\n\n  /** @inheritdoc */\n  updateOne(\n    filter: Realm.Services.MongoDB.Filter,\n    update: Realm.Services.MongoDB.Update,\n    options: Realm.Services.MongoDB.UpdateOptions = {},\n  ): Promise<UpdateResult<T[\"_id\"]>> {\n    return this.functions.updateOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert,\n      arrayFilters: options.arrayFilters,\n    });\n  }\n\n  /** @inheritdoc */\n  updateMany(\n    filter: Realm.Services.MongoDB.Filter,\n    update: Realm.Services.MongoDB.Update,\n    options: Realm.Services.MongoDB.UpdateOptions = {},\n  ): Promise<UpdateResult<T[\"_id\"]>> {\n    return this.functions.updateMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert,\n      arrayFilters: options.arrayFilters,\n    });\n  }\n\n  watch(options: {\n    /** List of ids to watch */\n    ids: T[\"_id\"][];\n    filter: never;\n  }): AsyncGenerator<ChangeEvent<T>>;\n  watch(options: {\n    ids: never;\n    /** A filter document */\n    filter: Realm.Services.MongoDB.Filter;\n  }): AsyncGenerator<ChangeEvent<T>>;\n  watch({\n    ids,\n    filter,\n  }: {\n    ids?: T[\"_id\"][];\n    filter?: Realm.Services.MongoDB.Filter;\n  } = {}): AsyncGenerator<ChangeEvent<T>> {\n    const iterable = this.functions.callFunctionStreaming(\"watch\", {\n      database: this.databaseName,\n      collection: this.collectionName,\n      ids,\n      filter,\n    });\n    // Unpack the async iterable, making it possible for us to propagate the `return` when this generator is returning\n    const iterator = iterable.then((i) => i[Symbol.asyncIterator]());\n    const stream = this.watchImpl(iterator);\n    // Store the original return on the stream, to enable propagating to the original implementation after we've returned on the iterator\n    const originalReturn = stream.return;\n    return Object.assign(stream, {\n      return(value: unknown) {\n        iterator.then((i) => (i.return ? i.return(value) : undefined));\n        return originalReturn.call(stream, value);\n      },\n    });\n  }\n\n  /**\n   * @param iterator An async iterator of the response body of a watch request.\n   * @yields Change events.\n   * Note: We had to split this from the `watch` method above to enable manually calling `return` on the response body iterator.\n   */\n  async *watchImpl(iterator: Promise<AsyncIterator<Uint8Array>>): AsyncGenerator<ChangeEvent<T>> {\n    const watchStream = new WatchStream<T>();\n    // Repack the iterator into an interable for the `watchImpl` to consume\n    const iterable = iterator.then((i) => ({ [Symbol.asyncIterator]: () => i }));\n    // Start consuming change events\n    for await (const chunk of await iterable) {\n      if (!chunk) continue;\n      watchStream.feedBuffer(chunk);\n      while (watchStream.state == WatchStreamState.HAVE_EVENT) {\n        yield watchStream.nextEvent() as ChangeEvent<T>;\n      }\n      if (watchStream.state == WatchStreamState.HAVE_ERROR)\n        // XXX this is just throwing an error like {error_code: \"BadRequest, error: \"message\"},\n        // which matches realm-js, but is different from how errors are handled in realm-web\n        throw watchStream.error;\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Fetcher } from \"../../Fetcher\";\nimport { MongoDBCollection } from \"./MongoDBCollection\";\n\n/**\n * A remote MongoDB Service enables access to a MongoDB Atlas cluster.\n */\nexport type MongoDBService = {\n  db(name: string): ReturnType<typeof createDatabase>;\n};\n\nexport { MongoDBCollection };\n\n/**\n * Creates an Remote MongoDB Collection.\n * Note: This method exists to enable function binding.\n * @param fetcher The underlying fetcher.\n * @param serviceName A service name.\n * @param databaseName A database name.\n * @param collectionName A collection name.\n * @returns The collection.\n */\nfunction createCollection<T extends Realm.Services.MongoDB.Document = Realm.Services.MongoDB.Document<unknown>>(\n  fetcher: Fetcher,\n  serviceName: string,\n  databaseName: string,\n  collectionName: string,\n): MongoDBCollection<T> {\n  return new MongoDBCollection<T>(fetcher, serviceName, databaseName, collectionName);\n}\n\n/**\n * Creates a Remote MongoDB Database.\n * Note: This method exists to enable function binding.\n * @param fetcher The underlying fetcher\n * @param serviceName A service name\n * @param databaseName A database name\n * @returns The database.\n */\nfunction createDatabase(fetcher: Fetcher, serviceName: string, databaseName: string): Realm.Services.MongoDBDatabase {\n  return {\n    collection: createCollection.bind(\n      null,\n      fetcher,\n      serviceName,\n      databaseName,\n    ) as Realm.Services.MongoDBDatabase[\"collection\"],\n  };\n}\n\n/**\n * Creates a Remote MongoDB Service.\n * Note: This method exists to enable function binding.\n * @param fetcher The underlying fetcher.\n * @param serviceName An optional service name.\n * @returns The service.\n */\nexport function createService(fetcher: Fetcher, serviceName = \"mongo-db\"): MongoDBService {\n  return { db: createDatabase.bind(null, fetcher, serviceName) };\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n// We're using a dependency to decode Base64 to UTF-8, because of https://stackoverflow.com/a/30106551/503899\nimport { Base64 } from \"js-base64\";\n\nimport type { App } from \"./App\";\nimport { Fetcher } from \"./Fetcher\";\nimport { UserProfile } from \"./UserProfile\";\nimport { UserStorage } from \"./UserStorage\";\nimport { FunctionsFactory } from \"./FunctionsFactory\";\nimport { Credentials, ProviderType } from \"./Credentials\";\nimport { ApiKeyAuth } from \"./auth-providers\";\nimport { createService as createMongoDBRemoteService } from \"./services/MongoDBService\";\nimport routes from \"./routes\";\n\nconst DEFAULT_DEVICE_ID = \"000000000000000000000000\";\n\ntype SimpleObject = Record<string, unknown>;\n\ninterface HydratableUserParameters {\n  app: App;\n  id: string;\n}\n\ninterface UserParameters {\n  app: App;\n  id: string;\n  providerType: ProviderType;\n  accessToken: string;\n  refreshToken: string;\n}\n\ntype JWT<CustomDataType = SimpleObject> = {\n  expires: number;\n  issuedAt: number;\n  subject: string;\n  userData: CustomDataType;\n};\n\n/** The state of a user within the app */\nexport enum UserState {\n  /** Active, with both access and refresh tokens */\n  Active = \"active\",\n  /** Logged out, but there might still be data persisted about the user, in the browser. */\n  LoggedOut = \"logged-out\",\n  /** Logged out and all data about the user has been removed. */\n  Removed = \"removed\",\n}\n\n/** The type of a user. */\nexport enum UserType {\n  /** Created by the user itself. */\n  Normal = \"normal\",\n  /** Created by an administrator of the app. */\n  Server = \"server\",\n}\n\n/**\n * Representation of an authenticated user of an app.\n */\nexport class User<\n  FunctionsFactoryType = Realm.DefaultFunctionsFactory,\n  CustomDataType = SimpleObject,\n  UserProfileDataType = Realm.DefaultUserProfileData,\n> implements Realm.User<FunctionsFactoryType, CustomDataType, UserProfileDataType>\n{\n  /**\n   * The app that this user is associated with.\n   */\n  public readonly app: App<FunctionsFactoryType, CustomDataType>;\n\n  /** @inheritdoc */\n  public readonly id: string;\n\n  /** @inheritdoc */\n  public readonly functions: FunctionsFactoryType & Realm.BaseFunctionsFactory;\n\n  /** @inheritdoc */\n  public readonly providerType: ProviderType;\n\n  /** @inheritdoc */\n  public readonly apiKeys: ApiKeyAuth;\n\n  private _accessToken: string | null;\n  private _refreshToken: string | null;\n  private _profile: UserProfile<UserProfileDataType> | undefined;\n  private fetcher: Fetcher;\n  private storage: UserStorage<UserProfileDataType>;\n\n  /**\n   * @param parameters Parameters of the user.\n   */\n  public constructor(parameters: HydratableUserParameters);\n  /**\n   * @param parameters Parameters of the user.\n   */\n  public constructor(parameters: UserParameters);\n  /**\n   * @param parameters Parameters of the user.\n   */\n  public constructor(parameters: HydratableUserParameters | UserParameters) {\n    this.app = parameters.app as App<unknown, unknown> as App<FunctionsFactoryType, CustomDataType>;\n    this.id = parameters.id;\n    this.storage = new UserStorage(this.app.storage, this.id);\n    if (\"accessToken\" in parameters && \"refreshToken\" in parameters && \"providerType\" in parameters) {\n      this._accessToken = parameters.accessToken;\n      this._refreshToken = parameters.refreshToken;\n      this.providerType = parameters.providerType;\n      // Save the parameters to storage, for future instances to be hydrated from\n      this.storage.accessToken = parameters.accessToken;\n      this.storage.refreshToken = parameters.refreshToken;\n      this.storage.providerType = parameters.providerType;\n    } else {\n      // Hydrate the rest of the parameters from storage\n      this._accessToken = this.storage.accessToken;\n      this._refreshToken = this.storage.refreshToken;\n      const providerType = this.storage.providerType;\n      this._profile = this.storage.profile;\n      if (providerType) {\n        this.providerType = providerType;\n      } else {\n        throw new Error(\"Storage is missing a provider type\");\n      }\n    }\n    this.fetcher = this.app.fetcher.clone({\n      userContext: { currentUser: this as unknown as User },\n    });\n    this.apiKeys = new ApiKeyAuth(this.fetcher);\n    this.functions = FunctionsFactory.create(this.fetcher) as FunctionsFactoryType & Realm.BaseFunctionsFactory;\n  }\n\n  /**\n   * @returns The access token used to authenticate the user towards Atlas App Services.\n   */\n  get accessToken(): string | null {\n    return this._accessToken;\n  }\n\n  /**\n   * @param token The new access token.\n   */\n  set accessToken(token: string | null) {\n    this._accessToken = token;\n    this.storage.accessToken = token;\n  }\n\n  /**\n   * @returns The refresh token used to issue new access tokens.\n   */\n  get refreshToken(): string | null {\n    return this._refreshToken;\n  }\n\n  /**\n   * @param token The new refresh token.\n   */\n  set refreshToken(token: string | null) {\n    this._refreshToken = token;\n    this.storage.refreshToken = token;\n  }\n\n  /**\n   * @returns The current state of the user.\n   */\n  get state(): UserState {\n    if (this.id in this.app.allUsers) {\n      return this.refreshToken === null ? UserState.LoggedOut : UserState.Active;\n    } else {\n      return UserState.Removed;\n    }\n  }\n\n  /**\n   * @returns The logged in state of the user.\n   */\n  get isLoggedIn(): boolean {\n    return this.state === UserState.Active;\n  }\n\n  get customData(): CustomDataType {\n    if (this.accessToken) {\n      const decodedToken = this.decodeAccessToken();\n      return decodedToken.userData;\n    } else {\n      throw new Error(\"Cannot read custom data without an access token\");\n    }\n  }\n\n  /**\n   * @returns Profile containing detailed information about the user.\n   */\n  get profile(): UserProfileDataType {\n    if (this._profile) {\n      return this._profile.data;\n    } else {\n      throw new Error(\"A profile was never fetched for this user\");\n    }\n  }\n\n  get identities(): Realm.UserIdentity[] {\n    if (this._profile) {\n      return this._profile.identities;\n    } else {\n      throw new Error(\"A profile was never fetched for this user\");\n    }\n  }\n\n  get deviceId(): string | null {\n    if (this.accessToken) {\n      const payload = this.accessToken.split(\".\")[1];\n      if (payload) {\n        const parsedPayload = JSON.parse(Base64.decode(payload));\n        const deviceId = parsedPayload[\"baas_device_id\"];\n        if (typeof deviceId === \"string\" && deviceId !== DEFAULT_DEVICE_ID) {\n          return deviceId;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Refresh the users profile data.\n   */\n  public async refreshProfile(): Promise<void> {\n    // Fetch the latest profile\n    const response = await this.fetcher.fetchJSON({\n      method: \"GET\",\n      path: routes.api().auth().profile().path,\n    });\n    // Create a profile instance\n    this._profile = new UserProfile(response);\n    // Store this for later hydration\n    this.storage.profile = this._profile;\n  }\n\n  /**\n   * Log out the user, invalidating the session (and its refresh token).\n   */\n  public async logOut(): Promise<void> {\n    // Invalidate the refresh token\n    try {\n      if (this._refreshToken !== null) {\n        await this.fetcher.fetchJSON({\n          method: \"DELETE\",\n          path: routes.api().auth().session().path,\n          tokenType: \"refresh\",\n        });\n      }\n    } catch (err) {\n      // Ignore failing to delete a missing refresh token\n      // It might have expired or it might be gone due to the user being deleted\n      if (!(err instanceof Error) || !err.message.includes(\"failed to find refresh token\")) {\n        throw err;\n      }\n    } finally {\n      // Forget the access and refresh token\n      this.accessToken = null;\n      this.refreshToken = null;\n    }\n  }\n\n  /** @inheritdoc */\n  public async linkCredentials(credentials: Credentials): Promise<void> {\n    const response = await this.app.authenticator.authenticate(credentials, this as unknown as User);\n    // Sanity check the response\n    if (this.id !== response.userId) {\n      const details = `got user id ${response.userId} expected ${this.id}`;\n      throw new Error(`Link response ment for another user (${details})`);\n    }\n    // Update the access token\n    this.accessToken = response.accessToken;\n    // Refresh the profile to include the new identity\n    await this.refreshProfile();\n  }\n\n  /**\n   * Request a new access token, using the refresh token.\n   */\n  public async refreshAccessToken(): Promise<void> {\n    const response = await this.fetcher.fetchJSON({\n      method: \"POST\",\n      path: routes.api().auth().session().path,\n      tokenType: \"refresh\",\n    });\n    const { access_token: accessToken } = response as Record<string, unknown>;\n    if (typeof accessToken === \"string\") {\n      this.accessToken = accessToken;\n    } else {\n      throw new Error(\"Expected an 'access_token' in the response\");\n    }\n  }\n\n  /** @inheritdoc */\n  public async refreshCustomData(): Promise<CustomDataType> {\n    await this.refreshAccessToken();\n    return this.customData;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public addListener(): void {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public removeListener(): void {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public removeAllListeners(): void {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /** @inheritdoc */\n  public callFunction<ReturnType = unknown>(name: string, ...args: unknown[]): Promise<ReturnType> {\n    return this.functions.callFunction(name, ...args);\n  }\n\n  /**\n   * @returns A plain ol' JavaScript object representation of the user.\n   */\n  public toJSON(): Record<string, unknown> {\n    return {\n      id: this.id,\n      accessToken: this.accessToken,\n      refreshToken: this.refreshToken,\n      profile: this._profile,\n      state: this.state,\n      customData: this.customData,\n    };\n  }\n\n  /** @inheritdoc */\n  push(): Realm.Services.Push {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /** @inheritdoc */\n  public mongoClient(serviceName: string): Realm.Services.MongoDB {\n    return createMongoDBRemoteService(this.fetcher, serviceName);\n  }\n\n  private decodeAccessToken(): JWT<CustomDataType> {\n    if (this.accessToken) {\n      // Decode and spread the token\n      const parts = this.accessToken.split(\".\");\n      if (parts.length !== 3) {\n        throw new Error(\"Expected an access token with three parts\");\n      }\n      // Decode the payload\n      const encodedPayload = parts[1];\n      const decodedPayload = Base64.decode(encodedPayload);\n      const parsedPayload = JSON.parse(decodedPayload);\n      const { exp: expires, iat: issuedAt, sub: subject, user_data: userData = {} } = parsedPayload;\n      // Validate the types\n      if (typeof expires !== \"number\") {\n        throw new Error(\"Failed to decode access token 'exp'\");\n      } else if (typeof issuedAt !== \"number\") {\n        throw new Error(\"Failed to decode access token 'iat'\");\n      }\n      return { expires, issuedAt, subject, userData };\n    } else {\n      throw new Error(\"Missing an access token\");\n    }\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\ntype AnonymousPayload = Realm.Credentials.AnonymousPayload;\ntype ApiKeyPayload = Realm.Credentials.ApiKeyPayload;\ntype EmailPasswordPayload = Realm.Credentials.EmailPasswordPayload;\ntype OAuth2RedirectPayload = Realm.Credentials.OAuth2RedirectPayload;\ntype GoogleAuthCodePayload = Realm.Credentials.GoogleAuthCodePayload;\ntype GooglePayload = Realm.Credentials.GooglePayload;\ntype FacebookPayload = Realm.Credentials.FacebookPayload;\ntype FunctionPayload = Realm.Credentials.FunctionPayload;\ntype JWTPayload = Realm.Credentials.JWTPayload;\ntype ApplePayload = Realm.Credentials.ApplePayload;\n\ntype GoogleOptions = OAuth2RedirectPayload | GoogleAuthCodePayload | { idToken: string };\n\n/**\n * Types of an authentication provider.\n */\nexport type ProviderType =\n  | \"anon-user\"\n  | \"api-key\"\n  | \"local-userpass\"\n  | \"custom-function\"\n  | \"custom-token\"\n  | \"oauth2-google\"\n  | \"oauth2-facebook\"\n  | \"oauth2-apple\";\n\ntype SimpleObject = Record<string, unknown>;\n\n// TODO: Ensure the static interface of the Credentials class implements the static interface of Realm.Credentials\n// See https://stackoverflow.com/a/43484801\n\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\nexport class Credentials<PayloadType extends SimpleObject = SimpleObject> implements Realm.Credentials<PayloadType> {\n  /**\n   * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).\n   * @param reuse - Reuse any existing anonymous user already logged in.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static anonymous(reuse = true): Credentials<AnonymousPayload> {\n    return new Credentials<AnonymousPayload>(\"anon-user\", \"anon-user\", reuse, {});\n  }\n\n  /**\n   * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n   * @param key The secret content of the API key.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static apiKey(key: string): Credentials<ApiKeyPayload> {\n    return new Credentials<ApiKeyPayload>(\"api-key\", \"api-key\", false, { key });\n  }\n\n  /**\n   * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).\n   * Note: This was formerly known as the \"Username/Password\" provider.\n   * @param email The end-users email address.\n   * @param password The end-users password.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static emailPassword(email: string, password: string): Credentials<EmailPasswordPayload> {\n    return new Credentials<EmailPasswordPayload>(\"local-userpass\", \"local-userpass\", false, {\n      username: email,\n      password,\n    });\n  }\n\n  /**\n   * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).\n   * @param payload The custom payload as expected by the server.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static function<PayloadType extends FunctionPayload = FunctionPayload>(\n    payload: PayloadType,\n  ): Credentials<PayloadType> {\n    return new Credentials<PayloadType>(\"custom-function\", \"custom-function\", false, payload);\n  }\n\n  /**\n   * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).\n   * @param token The JSON Web Token (JWT).\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static jwt(token: string): Credentials<JWTPayload> {\n    return new Credentials<JWTPayload>(\"custom-token\", \"custom-token\", false, {\n      token,\n    });\n  }\n\n  /**\n   * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).\n   * @param payload The URL that users should be redirected to, the auth code or id token from Google.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static google<P extends OAuth2RedirectPayload | GooglePayload>(payload: GoogleOptions): Credentials<P> {\n    return new Credentials<P>(\"oauth2-google\", \"oauth2-google\", false, Credentials.derivePayload(payload) as P);\n  }\n\n  /**\n   * @param payload The payload string.\n   * @returns A payload object based on the string.\n   */\n  private static derivePayload(payload: GoogleOptions): SimpleObject {\n    if (typeof payload === \"string\") {\n      throw new Error(\"`google(<tokenString>)` has been deprecated.  Please use `google(<authCodeObject>).\");\n    } else if (Object.keys(payload).length === 1) {\n      if (\"authCode\" in payload || \"redirectUrl\" in payload) {\n        return payload;\n      } else if (\"idToken\" in payload) {\n        return { id_token: payload.idToken };\n      } else {\n        throw new Error(\"Unexpected payload: \" + JSON.stringify(payload));\n      }\n    } else {\n      throw new Error(\"Expected only one property in payload, got \" + JSON.stringify(payload));\n    }\n  }\n\n  /**\n   * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).\n   * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static facebook<PayloadType extends OAuth2RedirectPayload | FacebookPayload>(\n    redirectUrlOrAccessToken: string,\n  ): Credentials<PayloadType> {\n    return new Credentials<PayloadType>(\n      \"oauth2-facebook\",\n      \"oauth2-facebook\",\n      false,\n      redirectUrlOrAccessToken.includes(\"://\")\n        ? { redirectUrl: redirectUrlOrAccessToken }\n        : { accessToken: redirectUrlOrAccessToken },\n    );\n  }\n\n  /**\n   * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).\n   * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n  static apple<PayloadType extends OAuth2RedirectPayload | ApplePayload>(\n    redirectUrlOrIdToken: string,\n  ): Credentials<PayloadType> {\n    return new Credentials<PayloadType>(\n      \"oauth2-apple\",\n      \"oauth2-apple\",\n      false,\n      redirectUrlOrIdToken.includes(\"://\") ? { redirectUrl: redirectUrlOrIdToken } : { id_token: redirectUrlOrIdToken },\n    );\n  }\n\n  /**\n   * The name of the authentication provider used when authenticating.\n   * Note: This is the same as the type for all current authentication providers in the service and mainly required for forwards-compatibility.\n   */\n  public readonly providerName: string;\n\n  /**\n   * The type of the authentication provider used when authenticating.\n   */\n  public readonly providerType: ProviderType;\n\n  /**\n   * Reuse any user already authenticated with this provider.\n   */\n  public readonly reuse: boolean;\n\n  /**\n   * The data being sent to the service when authenticating.\n   */\n  public readonly payload: PayloadType;\n\n  constructor(name: string, type: \"anon-user\", reuse: boolean, payload: AnonymousPayload);\n  constructor(name: string, type: \"api-key\", reuse: false, payload: ApiKeyPayload);\n  constructor(name: string, type: \"local-userpass\", reuse: false, payload: EmailPasswordPayload);\n  constructor(name: string, type: \"custom-function\", reuse: false, payload: FunctionPayload);\n  constructor(name: string, type: \"custom-token\", reuse: false, payload: JWTPayload);\n  constructor(name: string, type: \"oauth2-google\", reuse: false, payload: OAuth2RedirectPayload | GooglePayload);\n  constructor(name: string, type: \"oauth2-facebook\", reuse: false, payload: OAuth2RedirectPayload | FacebookPayload);\n  constructor(name: string, type: \"oauth2-apple\", reuse: false, payload: OAuth2RedirectPayload | ApplePayload);\n\n  /**\n   * Constructs an instance of credentials.\n   * @param providerName The name of the authentication provider used when authenticating.\n   * @param providerType The type of the authentication provider used when authenticating.\n   * @param reuse Reuse any user already authenticated with this provider.\n   * @param payload The data being sent to the service when authenticating.\n   */\n  constructor(providerName: string, providerType: ProviderType, reuse: boolean, payload: PayloadType) {\n    this.providerName = providerName;\n    this.providerType = providerType;\n    this.reuse = reuse;\n    this.payload = payload;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { PrefixedStorage, Storage } from \"./storage\";\n\nconst USER_IDS_STORAGE_KEY = \"userIds\";\nconst DEVICE_ID_STORAGE_KEY = \"deviceId\";\n\n/**\n * Storage specific to the app.\n */\nexport class AppStorage extends PrefixedStorage {\n  /**\n   * @param storage The underlying storage to wrap.\n   * @param appId The id of the app.\n   */\n  constructor(storage: Storage, appId: string) {\n    super(storage, `app(${appId})`);\n  }\n\n  /**\n   * Reads out the list of user ids from storage.\n   * @returns A list of user ids.\n   */\n  public getUserIds(): string[] {\n    const userIdsString = this.get(USER_IDS_STORAGE_KEY);\n    const userIds = userIdsString ? JSON.parse(userIdsString) : [];\n    if (Array.isArray(userIds)) {\n      // Remove any duplicates that might have been added\n      // The Set preserves insertion order\n      return [...new Set(userIds)];\n    } else {\n      throw new Error(\"Expected the user ids to be an array\");\n    }\n  }\n\n  /**\n   * Sets the list of ids in storage.\n   * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.\n   * @param userIds The list of ids to store.\n   * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.\n   */\n  public setUserIds(userIds: string[], mergeWithExisting: boolean): void {\n    if (mergeWithExisting) {\n      // Add any existing user id to the end of this list, avoiding duplicates\n      const existingIds = this.getUserIds();\n      for (const id of existingIds) {\n        if (userIds.indexOf(id) === -1) {\n          userIds.push(id);\n        }\n      }\n    }\n    // Store the list of ids\n    this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));\n  }\n\n  /**\n   * Remove an id from the list of ids.\n   * @param userId The id of a User to be removed.\n   */\n  public removeUserId(userId: string): void {\n    const existingIds = this.getUserIds();\n    const userIds = existingIds.filter((id) => id !== userId);\n    // Store the list of ids\n    this.setUserIds(userIds, false);\n  }\n\n  /**\n   * @returns id of this device (if any exists)\n   */\n  public getDeviceId(): string | null {\n    return this.get(DEVICE_ID_STORAGE_KEY);\n  }\n\n  /**\n   * @param deviceId The id of this device, to send on subsequent authentication requests.\n   */\n  public setDeviceId(deviceId: string): void {\n    this.set(DEVICE_ID_STORAGE_KEY, deviceId);\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nconst LOWERCASE_LETTERS = \"abcdefghijklmnopqrstuvwxyz\";\n\nimport { Storage } from \"./storage\";\nimport { generateRandomString, decodeQueryString } from \"./utils/string\";\nimport { getEnvironment } from \"./environment\";\n\nconst CLOSE_CHECK_INTERVAL = 100; // 10 times per second\n\n/**\n * Simplified handle to a browser window.\n */\nexport type Window = {\n  /**\n   * Attempt to close the window.\n   */\n  close: () => void;\n\n  /**\n   * Has the window been closed?\n   */\n  closed: boolean;\n};\n\ntype WindowOpener = (url: string) => Window | null;\n\ntype RedirectResult = {\n  /**\n   * The id of the Atlas App Services application.\n   */\n  appId: string;\n\n  /**\n   * The pseudo-random state which is passed through the OAuth flow.\n   */\n  state?: string;\n\n  /**\n   * Any error that has occurred.\n   */\n  error?: string;\n\n  /**\n   * The serialized combined value containing ids and tokens.\n   */\n  userAuth?: string;\n\n  /**\n   * Was this originally a request to link a user with other credentials?\n   */\n  link?: string;\n};\n\nconst REDIRECT_HASH_TO_RESULT: { [k: string]: keyof RedirectResult } = {\n  _baas_client_app_id: \"appId\",\n  _baas_ua: \"userAuth\",\n  _baas_link: \"link\",\n  _baas_error: \"error\",\n  _baas_state: \"state\",\n};\n\n/**\n * A collection of methods helping implement the OAuth2 flow.\n */\nexport class OAuth2Helper {\n  /**\n   * Parses the query string from the final step of the OAuth flow.\n   * @param queryString The query string passed through in location.hash.\n   * @returns The result of the OAuth flow.\n   */\n  public static parseRedirectLocation(queryString: string): RedirectResult {\n    const params = decodeQueryString(queryString);\n    const result: Partial<RedirectResult> = {};\n    for (const [p, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {\n      const value = params[p];\n      if (value) {\n        result[r] = value;\n      }\n    }\n    return result as RedirectResult;\n  }\n\n  /**\n   * Handle the redirect querystring by parsing it and storing it for others to consume.\n   * @param queryString The query string containing the encoded result from the OAuth provider.\n   * @param storage The underlying storage used to persist the result.\n   */\n  public static handleRedirect(queryString: string, storage = getEnvironment().defaultStorage): void {\n    const result = OAuth2Helper.parseRedirectLocation(queryString);\n    const { state, error } = result;\n    if (typeof state === \"string\") {\n      const oauth2Storage = storage.prefix(\"oauth2\");\n      const stateStorage = OAuth2Helper.getStateStorage(oauth2Storage, state);\n      stateStorage.set(\"result\", JSON.stringify(result));\n    } else if (error) {\n      throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);\n    } else {\n      throw new Error(\"Failed to handle OAuth 2.0 redirect.\");\n    }\n  }\n\n  /**\n   * Decodes the authInfo string into its seperate parts.\n   * @param authInfo An authInfo string returned from the server.\n   * @returns An object containing the separate parts of the authInfo string.\n   */\n  public static decodeAuthInfo(authInfo: string | undefined): Record<string, unknown> {\n    const parts = (authInfo || \"\").split(\"$\");\n    if (parts.length === 4) {\n      const [accessToken, refreshToken, userId, deviceId] = parts;\n      return { accessToken, refreshToken, userId, deviceId };\n    } else {\n      throw new Error(\"Failed to decode 'authInfo' into ids and tokens\");\n    }\n  }\n\n  /**\n   * Get the storage key associated of an secret associated with a state.\n   * @param storage The root storage used to derive a \"state namespaced\" storage.\n   * @param state The random state.\n   * @returns The storage associated with a particular state.\n   */\n  private static getStateStorage(storage: Storage, state: string) {\n    return storage.prefix(`state(${state})`);\n  }\n\n  /**\n   * The storage used when storing and retriving secrets.\n   */\n  private storage: Storage;\n\n  /**\n   * The function called to open a window.\n   */\n  private openWindow: WindowOpener;\n\n  /**\n   * @param storage The underlying storage to use when storing and retriving secrets.\n   * @param openWindow An optional function called when a browser window needs to open.\n   */\n  constructor(storage: Storage, openWindow = getEnvironment().openWindow) {\n    this.storage = storage.prefix(\"oauth2\");\n    this.openWindow = openWindow;\n  }\n\n  /**\n   * Open a window and wait for the redirect to be handled.\n   * @param url The URL to open.\n   * @param state The state which will be used to listen for storage updates.\n   * @returns The result passed through the redirect.\n   */\n  public openWindowAndWaitForRedirect(url: string, state: string): Promise<RedirectResult> {\n    const stateStorage = OAuth2Helper.getStateStorage(this.storage, state);\n    // Return a promise that resolves when the  gets known\n    return new Promise((resolve, reject) => {\n      let redirectWindow: Window | null = null;\n      // We're declaring the interval now to enable referencing before its initialized\n      let windowClosedInterval: TimerHandle; // eslint-disable-line prefer-const\n\n      const handleStorageUpdate = () => {\n        // Trying to get the secret from storage\n        const result = stateStorage.get(\"result\");\n        if (result) {\n          const parsedResult = JSON.parse(result);\n          // The secret got updated!\n          stateStorage.removeListener(handleStorageUpdate);\n          // Clear the storage to prevent others from reading this\n          stateStorage.clear();\n          // Try closing the newly created window\n          try {\n            if (redirectWindow) {\n              // Stop checking if the window closed\n              clearInterval(windowClosedInterval);\n              redirectWindow.close();\n            }\n          } catch (err) {\n            console.warn(`Failed closing redirect window: ${err}`);\n          } finally {\n            resolve(parsedResult);\n          }\n        }\n      };\n\n      // Add a listener to the state storage, awaiting an update to the secret\n      stateStorage.addListener(handleStorageUpdate);\n      // Open up a window\n      redirectWindow = this.openWindow(url);\n      // Not using a const, because we need the two listeners to reference each other when removing the other.\n      windowClosedInterval = setInterval(() => {\n        // Polling \"closed\" because registering listeners on the window violates cross-origin policies\n        if (!redirectWindow) {\n          // No need to keep polling for a window that we can't check\n          clearInterval(windowClosedInterval);\n        } else if (redirectWindow.closed) {\n          // Stop polling the window state\n          clearInterval(windowClosedInterval);\n          // Stop listening for changes to the storage\n          stateStorage.removeListener(handleStorageUpdate);\n          // Reject the promise\n          const err = new Error(\"Window closed\");\n          reject(err);\n        }\n      }, CLOSE_CHECK_INTERVAL);\n    });\n  }\n\n  /**\n   * Generate a random state string.\n   * @returns The random state string.\n   */\n  public generateState(): string {\n    return generateRandomString(12, LOWERCASE_LETTERS);\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Fetcher } from \"./Fetcher\";\nimport { Storage } from \"./storage\";\nimport { OAuth2Helper } from \"./OAuth2Helper\";\nimport { encodeQueryString, QueryParams } from \"./utils/string\";\nimport { DeviceInformation } from \"./DeviceInformation\";\nimport { User } from \"./User\";\n\nconst REDIRECT_LOCATION_HEADER = \"x-baas-location\";\n\n// TODO: Add the deviceId to the auth response.\n\n/**\n * The response from an authentication request.\n */\nexport type AuthResponse = {\n  /**\n   * The id of the user.\n   */\n  userId: string;\n  /**\n   * The short-living access token.\n   */\n  accessToken: string;\n  /**\n   * The refresh token for the session.\n   */\n  refreshToken: string | null;\n  /**\n   * The id of the device recognized by the server.\n   */\n  deviceId: string;\n};\n\ntype DeviceInformationGetter = () => DeviceInformation;\n\n/**\n * Handles authentication and linking of users.\n */\nexport class Authenticator {\n  private readonly fetcher: Fetcher;\n  private readonly oauth2: OAuth2Helper;\n  private readonly getDeviceInformation: DeviceInformationGetter;\n\n  /**\n   * @param fetcher The fetcher used to fetch responses from the server.\n   * @param storage The storage used when completing OAuth 2.0 flows (should not be scoped to a specific app).\n   * @param getDeviceInformation Called to get device information to be sent to the server.\n   */\n  constructor(fetcher: Fetcher, storage: Storage, getDeviceInformation: DeviceInformationGetter) {\n    this.fetcher = fetcher;\n    this.oauth2 = new OAuth2Helper(storage);\n    this.getDeviceInformation = getDeviceInformation;\n  }\n\n  /**\n   * @param credentials Credentials to use when logging in.\n   * @param linkingUser A user requesting to link.\n   * @returns A promise resolving to the response from the server.\n   */\n  public async authenticate(credentials: Realm.Credentials, linkingUser?: User): Promise<AuthResponse> {\n    const deviceInformation = this.getDeviceInformation();\n    const isLinking = typeof linkingUser === \"object\";\n    if (credentials.providerType.startsWith(\"oauth2\") && typeof credentials.payload.redirectUrl === \"string\") {\n      // Initiate the OAuth2 flow by generating a state and fetch a redirect URL\n      const state = this.oauth2.generateState();\n      const url = await this.getLogInUrl(credentials, isLinking, {\n        state,\n        redirect: credentials.payload.redirectUrl,\n        // Ensure redirects are communicated in a header different from \"Location\" and status remains 200 OK\n        providerRedirectHeader: isLinking ? true : undefined,\n        // Add the device information, only if we're not linking - since that request won't have a body of its own.\n        device: !isLinking ? deviceInformation.encode() : undefined,\n      });\n\n      // If we're linking, we need to send the users access token in the request\n      if (isLinking) {\n        const response = await this.fetcher.fetch({\n          method: \"GET\",\n          url,\n          tokenType: isLinking ? \"access\" : \"none\",\n          user: linkingUser,\n          // The response will set a cookie that we need to tell the browser to store\n          mode: \"cors\",\n          credentials: \"include\",\n        });\n        // If a response header contains a redirect URL: Open a window and wait for the redirect to be handled\n        const redirectUrl = response.headers.get(REDIRECT_LOCATION_HEADER);\n        if (redirectUrl) {\n          return this.openWindowAndWaitForAuthResponse(redirectUrl, state);\n        } else {\n          throw new Error(`Missing ${REDIRECT_LOCATION_HEADER} header`);\n        }\n      } else {\n        // Otherwise we can open a window and let the server redirect the user right away\n        // This gives lower latency (as we don't need the client to receive and execute the redirect in code)\n        // This also has less dependency on cookies and doesn't sent any tokens.\n        return this.openWindowAndWaitForAuthResponse(url, state);\n      }\n    } else {\n      const logInUrl = await this.getLogInUrl(credentials, isLinking);\n      const response = await this.fetcher.fetchJSON({\n        method: \"POST\",\n        url: logInUrl,\n        body: {\n          ...credentials.payload,\n          options: {\n            device: deviceInformation.toJSON(),\n          },\n        },\n        tokenType: isLinking ? \"access\" : \"none\",\n        user: linkingUser,\n      });\n      // Spread out values from the response and ensure they're valid\n      const {\n        user_id: userId,\n        access_token: accessToken,\n        refresh_token: refreshToken = null,\n        device_id: deviceId,\n      } = response as Record<string, unknown>;\n      if (typeof userId !== \"string\") {\n        throw new Error(\"Expected a user id in the response\");\n      }\n      if (typeof accessToken !== \"string\") {\n        throw new Error(\"Expected an access token in the response\");\n      }\n      if (typeof refreshToken !== \"string\" && refreshToken !== null) {\n        throw new Error(\"Expected refresh token to be a string or null\");\n      }\n      if (typeof deviceId !== \"string\") {\n        throw new Error(\"Expected device id to be a string\");\n      }\n      return { userId, accessToken, refreshToken, deviceId };\n    }\n  }\n\n  /**\n   * @param credentials Credentials to use when logging in.\n   * @param link Should the request link with the current user?\n   * @param extraQueryParams Any extra parameters to include in the query string\n   * @returns A promise resolving to the url to be used when logging in.\n   */\n  private async getLogInUrl(credentials: Realm.Credentials, link = false, extraQueryParams: Partial<QueryParams> = {}) {\n    // See https://github.com/mongodb/stitch-js-sdk/blob/310f0bd5af80f818cdfbc3caf1ae29ffa8e9c7cf/packages/core/sdk/src/auth/internal/CoreStitchAuth.ts#L746-L780\n    const appRoute = this.fetcher.appRoute;\n    const loginRoute = appRoute.authProvider(credentials.providerName).login();\n    const qs = encodeQueryString({\n      link: link ? \"true\" : undefined,\n      ...extraQueryParams,\n    });\n    const locationUrl = await this.fetcher.locationUrl;\n    return locationUrl + loginRoute.path + qs;\n  }\n\n  private async openWindowAndWaitForAuthResponse(redirectUrl: string, state: string): Promise<AuthResponse> {\n    const redirectResult = await this.oauth2.openWindowAndWaitForRedirect(redirectUrl, state);\n    // Decode the auth info (id, tokens, etc.) from the result of the redirect\n    return OAuth2Helper.decodeAuthInfo(redirectResult.userAuth) as AuthResponse;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { RequestInit, Response } from \"@realm/fetch\";\n\n// TODO: Determine if the shape of an error response is specific to each service or widely used.\n\n/**\n * An error produced while communicating with the MongoDB Realm server.\n */\nexport class MongoDBRealmError extends Error {\n  /**\n   * The method used when requesting.\n   */\n  public readonly method: string;\n  /**\n   * The URL of the resource which got fetched.\n   */\n  public readonly url: string;\n  /**\n   * The HTTP status code of the response.\n   */\n  public readonly statusCode: number;\n  /**\n   * A human readable version of the HTTP status.\n   */\n  public readonly statusText: string;\n  /**\n   * Any application-level error message.\n   */\n  public readonly error: string | undefined;\n  /**\n   * Any application-level error code.\n   */\n  public readonly errorCode: string | undefined;\n  /**\n   * Any application-level (URL) link containing details about the error.\n   */\n  public readonly link: string | undefined;\n\n  /**\n   * Constructs and returns an error from a request and a response.\n   * Note: The caller must throw this error themselves.\n   * @param url The url of the requested resource.\n   * @param request The request sent to the server.\n   * @param response A raw response, as returned from the server.\n   * @returns An error from a request and a response.\n   */\n  public static async fromRequestAndResponse(\n    url: string,\n    request: RequestInit<unknown>,\n    response: Response,\n  ): Promise<MongoDBRealmError> {\n    const { method = \"unknown\" } = request;\n    const { status, statusText } = response;\n    if (response.headers.get(\"content-type\")?.startsWith(\"application/json\")) {\n      const body = await response.json();\n      if (typeof body === \"object\" && body) {\n        const { error, error_code: errorCode, link } = body as SimpleObject;\n        return new MongoDBRealmError(\n          method,\n          url,\n          status,\n          statusText,\n          typeof error === \"string\" ? error : undefined,\n          typeof errorCode === \"string\" ? errorCode : undefined,\n          typeof link === \"string\" ? link : undefined,\n        );\n      }\n    }\n    return new MongoDBRealmError(method, url, status, statusText);\n  }\n\n  constructor(\n    method: string,\n    url: string,\n    statusCode: number,\n    statusText: string,\n    error?: string,\n    errorCode?: string,\n    link?: string,\n  ) {\n    const summary = statusText ? `status ${statusCode} ${statusText}` : `status ${statusCode}`;\n    if (typeof error === \"string\") {\n      super(`Request failed (${method} ${url}): ${error} (${summary})`);\n    } else {\n      super(`Request failed (${method} ${url}): (${summary})`);\n    }\n    this.method = method;\n    this.url = url;\n    this.statusText = statusText;\n    this.statusCode = statusCode;\n    this.error = error;\n    this.errorCode = errorCode;\n    this.link = link;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { fetch, RequestInit, Response } from \"@realm/fetch\";\n\nimport { MongoDBRealmError } from \"./MongoDBRealmError\";\n\nimport { User } from \"./User\";\nimport routes from \"./routes\";\nimport { deserialize, serialize } from \"./utils/ejson\";\n\n/**\n * Some fetch function\n */\nexport type FetchFunction = typeof fetch<unknown>;\n\ntype SimpleObject = Record<string, unknown>;\n\n/**\n * @param response A possible response.\n * @param response.body A possible response body.\n * @returns An async iterator.\n */\nfunction asyncIteratorFromResponseBody({ body }: Response): AsyncIterable<Uint8Array> {\n  if (typeof body !== \"object\" || body === null) {\n    throw new Error(\"Expected a non-null object\");\n  } else if (\"getReader\" in body) {\n    return {\n      [Symbol.asyncIterator]() {\n        const reader = body.getReader();\n        return {\n          async next() {\n            const { done, value } = await reader.read();\n            if (done) {\n              // TODO: Simply return the result once https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1676 is merged and released\n              return { done, value: undefined };\n            } else if (value instanceof Uint8Array) {\n              return { done, value };\n            } else {\n              throw new Error(\"Expected value to be Uint8Array\");\n            }\n          },\n          async return() {\n            await reader.cancel();\n            return { done: true, value: null };\n          },\n        };\n      },\n    };\n  } else {\n    throw new Error(\"Expected an AsyncIterable or a ReadableStream\");\n  }\n}\n\n/**\n * Used to control which user is currently active - this would most likely be the {App} instance.\n */\nexport type UserContext = {\n  /**\n   * The currently active user.\n   */\n  currentUser: User | null;\n};\n\n/**\n * Used when getting the location url of the app.\n */\nexport type LocationUrlContext = {\n  /** The location URL of the app, used instead of the base url. */\n  locationUrl: Promise<string>;\n};\n\ntype TokenType = \"access\" | \"refresh\" | \"none\";\n\ninterface RequestWithUrl<RequestBody> extends RequestInit<RequestBody> {\n  path?: never;\n  url: string;\n}\n\ninterface RequestWithPath<RequestBody> extends Omit<RequestInit<RequestBody>, \"url\"> {\n  /** Construct a URL from the location URL prepended is path */\n  path: string;\n  url?: never;\n}\n\n/**\n * A request which will send the access or refresh token of the current user.\n */\nexport type AuthenticatedRequest<RequestBody = unknown> = {\n  /**\n   * Which token should be used when requesting?\n   * @default \"access\"\n   */\n  tokenType?: TokenType;\n  /**\n   * The user issuing the request.\n   */\n  user?: User;\n} & (RequestWithUrl<RequestBody> | RequestWithPath<RequestBody>);\n\n/**\n *\n */\nexport type FetcherConfig = {\n  /**\n   * The id of the app.\n   */\n  appId: string;\n  /**\n   * The underlying fetch function.\n   */\n  fetch: FetchFunction;\n  /**\n   * An object which can be used to determine the currently active user.\n   */\n  userContext: UserContext;\n  /**\n   * An optional promise which resolves to the response of the app location request.\n   */\n  locationUrlContext: LocationUrlContext;\n};\n\n/**\n * Wraps the fetch from the \"@realm/fetch\" package.\n * Extracts error messages and throws `MongoDBRealmError` objects upon failures.\n * Injects access or refresh tokens for a current or specific user.\n * Refreshes access tokens if requests fails due to a 401 error.\n * Optionally parses response as JSON before returning it.\n * Fetches and exposes an app's location url.\n */\nexport class Fetcher implements LocationUrlContext {\n  /**\n   * @param user An optional user to generate the header for.\n   * @param tokenType The type of token (access or refresh).\n   * @returns An object containing the user's token as \"Authorization\" header or undefined if no user is given.\n   */\n  private static buildAuthorizationHeader(user: User | null, tokenType: TokenType): Record<string, string> {\n    if (!user || tokenType === \"none\") {\n      return {};\n    } else if (tokenType === \"access\") {\n      return { Authorization: `Bearer ${user.accessToken}` };\n    } else if (tokenType === \"refresh\") {\n      return { Authorization: `Bearer ${user.refreshToken}` };\n    } else {\n      throw new Error(`Unexpected token type (${tokenType})`);\n    }\n  }\n\n  /**\n   * @param body The body string or object passed from a request.\n   * @returns An object optionally specifying the \"Content-Type\" header.\n   */\n  private static buildBody(body: unknown): string | undefined {\n    if (!body) {\n      return;\n    } else if (typeof body === \"object\" && body !== null) {\n      return JSON.stringify(serialize(body as SimpleObject));\n    } else if (typeof body === \"string\") {\n      return body;\n    } else {\n      console.log(\"body is\", body);\n      throw new Error(\"Unexpected type of body\");\n    }\n  }\n\n  /**\n   * @param body The body string or object passed from a request.\n   * @returns An object optionally specifying the \"Content-Type\" header.\n   */\n  private static buildJsonHeader(body: string | undefined): Record<string, string> {\n    if (body && body.length > 0) {\n      return { \"Content-Type\": \"application/json\" };\n    } else {\n      return {};\n    }\n  }\n\n  private readonly config: FetcherConfig;\n\n  /**\n   * @param config A configuration of the fetcher.\n   * @param config.appId The application id.\n   * @param config.fetch The fetch function used when fetching.\n   * @param config.userContext An object used to determine the requesting user.\n   * @param config.locationUrlContext An object used to determine the location / base URL.\n   */\n  constructor(config: FetcherConfig) {\n    this.config = config;\n  }\n\n  clone(config: Partial<FetcherConfig>): Fetcher {\n    return new Fetcher({\n      ...this.config,\n      ...config,\n    });\n  }\n\n  /**\n   * Fetch a network resource as an authenticated user.\n   * @param request The request which should be sent to the server.\n   * @returns The response from the server.\n   */\n  public async fetch<RequestBody = unknown>(request: AuthenticatedRequest<RequestBody>): Promise<Response> {\n    const { path, url, tokenType = \"access\", user = this.config.userContext.currentUser, ...restOfRequest } = request;\n\n    if (typeof path === \"string\" && typeof url === \"string\") {\n      throw new Error(\"Use of 'url' and 'path' mutually exclusive\");\n    } else if (typeof path === \"string\") {\n      // Derive the URL\n      const url = (await this.config.locationUrlContext.locationUrl) + path;\n      return this.fetch({ ...request, path: undefined, url });\n    } else if (typeof url === \"string\") {\n      const response = await this.config.fetch(url, {\n        ...restOfRequest,\n        headers: {\n          ...Fetcher.buildAuthorizationHeader(user, tokenType),\n          ...request.headers,\n        },\n      });\n\n      if (response.ok) {\n        return response;\n      } else {\n        const error = await MongoDBRealmError.fromRequestAndResponse(url, request, response);\n        if (\n          user &&\n          response.status === 401 &&\n          (error.errorCode === \"InvalidSession\" || // Expired token\n            error.error === \"unauthorized\") // Entirely invalid signature\n        ) {\n          if (tokenType === \"access\") {\n            // If the access token has expired, it would help refreshing it\n            await user.refreshAccessToken();\n            // Retry with the specific user, since the currentUser might have changed.\n            return this.fetch({ ...request, user });\n          } else if (tokenType === \"refresh\") {\n            // A 401 error while using the refresh token indicates the token has an issue.\n            // Reset the tokens to prevent a lock.\n            user.accessToken = null;\n            user.refreshToken = null;\n          }\n        }\n        // Throw an error with a message extracted from the body\n        throw error;\n      }\n    } else {\n      throw new Error(\"Expected either 'url' or 'path'\");\n    }\n  }\n\n  /**\n   * Fetch a network resource as an authenticated user and parse the result as extended JSON.\n   * @param request The request which should be sent to the server.\n   * @returns The response from the server, parsed as extended JSON.\n   */\n  public async fetchJSON<RequestBody = unknown, ResponseBody = unknown>(\n    request: AuthenticatedRequest<RequestBody>,\n  ): Promise<ResponseBody> {\n    const { body } = request;\n    const serializedBody = Fetcher.buildBody(body);\n    const contentTypeHeaders = Fetcher.buildJsonHeader(serializedBody);\n    const response = await this.fetch({\n      ...request,\n      body: serializedBody,\n      headers: {\n        Accept: \"application/json\",\n        ...contentTypeHeaders,\n        ...request.headers,\n      },\n    });\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType?.startsWith(\"application/json\")) {\n      const responseBody = await response.json();\n      return deserialize(responseBody as SimpleObject) as ResponseBody;\n    } else if (contentType === null) {\n      return null as unknown as ResponseBody;\n    } else {\n      throw new Error(`Expected JSON response, got \"${contentType}\"`);\n    }\n  }\n\n  /**\n   * Fetch an \"event-stream\" resource as an authenticated user.\n   * @param request The request which should be sent to the server.\n   * @returns An async iterator over the response body.\n   */\n  public async fetchStream<RequestBody = unknown>(\n    request: AuthenticatedRequest<RequestBody>,\n  ): Promise<AsyncIterable<Uint8Array>> {\n    const response = await this.fetch({\n      ...request,\n      headers: {\n        Accept: \"text/event-stream\",\n        ...request.headers,\n      },\n    });\n    return asyncIteratorFromResponseBody(response);\n  }\n\n  /**\n   * @returns The path of the app route.\n   */\n  public get appRoute() {\n    return routes.api().app(this.config.appId);\n  }\n\n  /**\n   * @returns A promise of the location URL of the app.\n   */\n  public get locationUrl(): Promise<string> {\n    return this.config.locationUrlContext.locationUrl;\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { ObjectId } from \"bson\";\nimport { Base64 } from \"js-base64\";\n\nimport { getEnvironment } from \"./environment\";\nimport { removeKeysWithUndefinedValues } from \"./utils/objects\";\n\n/**\n * The key in a storage on which the device id is stored.\n */\nexport const DEVICE_ID_STORAGE_KEY = \"deviceId\";\n\n/** Provided by Rollup */\ndeclare const __SDK_VERSION__: string;\n\nenum DeviceFields {\n  DEVICE_ID = \"deviceId\",\n  APP_ID = \"appId\",\n  APP_VERSION = \"appVersion\",\n  PLATFORM = \"platform\",\n  PLATFORM_VERSION = \"platformVersion\",\n  SDK_VERSION = \"sdkVersion\",\n}\n\ntype DeviceInformationValues = {\n  [DeviceFields.PLATFORM]: string;\n  [DeviceFields.PLATFORM_VERSION]: string;\n  [DeviceFields.SDK_VERSION]: string;\n  [DeviceFields.APP_ID]?: string;\n  [DeviceFields.APP_VERSION]?: string;\n  [DeviceFields.DEVICE_ID]?: ObjectId;\n};\n\ntype DeviceInformationParams = {\n  appId?: string;\n  appVersion?: string;\n  deviceId?: ObjectId;\n};\n\n/**\n * Information describing the device, app and SDK.\n */\nexport class DeviceInformation implements DeviceInformationValues {\n  /**\n   * The id of the device.\n   */\n  public readonly deviceId: ObjectId | undefined;\n\n  /**\n   * The id of the Realm App.\n   */\n  public readonly appId: string | undefined;\n\n  /**\n   * The version of the Realm App.\n   */\n  public readonly appVersion: string | undefined;\n\n  /**\n   * The name of the platform / browser.\n   */\n  public readonly platform: string;\n\n  /**\n   * The version of the platform / browser.\n   */\n  public readonly platformVersion: string;\n\n  /**\n   * The version of the Realm Web SDK (constant provided by Rollup).\n   */\n  public readonly sdkVersion: string = __SDK_VERSION__;\n\n  /**\n   * @param params Construct the device information from these parameters.\n   * @param params.appId A user-defined application id.\n   * @param params.appVersion A user-defined application version.\n   * @param params.deviceId An unique id for the end-users device.\n   */\n  public constructor({ appId, appVersion, deviceId }: DeviceInformationParams) {\n    const environment = getEnvironment();\n    this.platform = environment.platform;\n    this.platformVersion = environment.platformVersion;\n    this.appId = appId;\n    this.appVersion = appVersion;\n    this.deviceId = deviceId;\n  }\n\n  /**\n   * @returns An base64 URI encoded representation of the device information.\n   */\n  public encode(): string {\n    const obj = removeKeysWithUndefinedValues(this as Record<string, unknown>);\n    return Base64.encode(JSON.stringify(obj));\n  }\n\n  /**\n   * @returns The defaults\n   */\n  public toJSON(): Record<string, unknown> {\n    return removeKeysWithUndefinedValues(this as Record<string, unknown>);\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { fetch } from \"@realm/fetch\";\nimport { ObjectId } from \"bson\";\n\nimport { User, UserState } from \"./User\";\nimport { Credentials, ProviderType } from \"./Credentials\";\nimport { EmailPasswordAuth } from \"./auth-providers\";\nimport { Storage } from \"./storage\";\nimport { AppStorage } from \"./AppStorage\";\nimport { getEnvironment } from \"./environment\";\nimport { AuthResponse, Authenticator } from \"./Authenticator\";\nimport { FetchFunction, Fetcher, UserContext } from \"./Fetcher\";\nimport routes from \"./routes\";\nimport { DeviceInformation, DEVICE_ID_STORAGE_KEY } from \"./DeviceInformation\";\n\ntype SimpleObject = Record<string, unknown>;\n\n/**\n * Default base url to prefix all requests if no baseUrl is specified in the configuration.\n */\nexport const DEFAULT_BASE_URL = \"https://services.cloud.mongodb.com\";\n\n/**\n * Configuration to pass as an argument when constructing an app.\n */\nexport interface AppConfiguration extends Realm.AppConfiguration {\n  /**\n   * Transport to use when fetching resources.\n   */\n  fetch?: FetchFunction;\n  /**\n   * Used when persisting app state, such as tokens of authenticated users.\n   */\n  storage?: Storage;\n  /**\n   * Skips requesting a location URL via the baseUrl and use the `baseUrl` as the url prefixed for any requests initiated by this app.\n   * This can useful when connecting to a server through a reverse proxy, to avoid the location request to make the client \"break out\" and start requesting another server.\n   */\n  skipLocationRequest?: boolean;\n}\n\n/**\n * Atlas App Services Application\n */\nexport class App<\n  FunctionsFactoryType = Realm.DefaultFunctionsFactory & Realm.BaseFunctionsFactory,\n  CustomDataType = SimpleObject,\n> implements Realm.App<FunctionsFactoryType, CustomDataType>\n{\n  /**\n   * A map of app instances returned from calling getApp.\n   */\n  private static appCache: { [id: string]: App } = {};\n\n  /**\n   * Get or create a singleton Realm App from an id.\n   * Calling this function multiple times with the same id will return the same instance.\n   * @param id The Realm App id visible from the Atlas App Services UI or a configuration.\n   * @returns The Realm App instance.\n   */\n  static getApp(id: string): App {\n    if (id in App.appCache) {\n      return App.appCache[id];\n    } else {\n      const instance = new App(id);\n      App.appCache[id] = instance;\n      return instance;\n    }\n  }\n\n  /** @inheritdoc */\n  public readonly id: string;\n\n  /**\n   * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n   */\n  public static readonly Credentials = Credentials;\n\n  /**\n   * An object which can be used to fetch responses from the server.\n   */\n  public readonly fetcher: Fetcher;\n\n  /** @inheritdoc */\n  public readonly emailPasswordAuth: EmailPasswordAuth;\n\n  /**\n   * Storage available for the app.\n   */\n  public readonly storage: AppStorage;\n\n  /**\n   * Internal authenticator used to complete authentication requests.\n   */\n  public readonly authenticator: Authenticator;\n\n  /**\n   * An array of active and logged-out users.\n   * Elements in the beginning of the array is considered more recent than the later elements.\n   */\n  private users: User<FunctionsFactoryType, CustomDataType>[] = [];\n\n  /**\n   * The base URL of the app.\n   */\n  private readonly baseUrl: string;\n\n  /**\n   * Local app configuration.\n   * Useful to determine what name and version an authenticated user is running.\n   */\n  private readonly localApp: Realm.LocalAppConfiguration | undefined;\n\n  /**\n   * A promise resolving to the App's location url.\n   */\n  private _locationUrl: Promise<string> | null = null;\n\n  /**\n   * Construct a Realm App, either from the Realm App id visible from the Atlas App Services UI or a configuration.\n   * @param idOrConfiguration The Realm App id or a configuration to use for this app.\n   */\n  constructor(idOrConfiguration: string | AppConfiguration) {\n    // If the argument is a string, convert it to a simple configuration object.\n    const configuration = typeof idOrConfiguration === \"string\" ? { id: idOrConfiguration } : idOrConfiguration;\n    // Initialize properties from the configuration\n    if (typeof configuration === \"object\" && typeof configuration.id === \"string\") {\n      this.id = configuration.id;\n    } else {\n      throw new Error(\"Missing an Atlas App Services app-id\");\n    }\n    this.baseUrl = configuration.baseUrl || DEFAULT_BASE_URL;\n    if (configuration.skipLocationRequest) {\n      // Use the base url directly, instead of requesting a location URL from the server\n      this._locationUrl = Promise.resolve(this.baseUrl);\n    }\n    this.localApp = configuration.app;\n    // Construct a fetcher wrapping the network transport\n    this.fetcher = new Fetcher({\n      appId: this.id,\n      userContext: this as UserContext,\n      locationUrlContext: this,\n      fetch: configuration.fetch ?? fetch,\n    });\n    // Construct the auth providers\n    this.emailPasswordAuth = new EmailPasswordAuth(this.fetcher);\n    // Construct the storage\n    const baseStorage = configuration.storage || getEnvironment().defaultStorage;\n    this.storage = new AppStorage(baseStorage, this.id);\n    this.authenticator = new Authenticator(this.fetcher, baseStorage, () => this.deviceInformation);\n    // Hydrate the app state from storage\n    try {\n      this.hydrate();\n    } catch (err) {\n      // The storage was corrupted\n      this.storage.clear();\n      // A failed hydration shouldn't throw and break the app experience\n      // Since this is \"just\" persisted state that unfortunately got corrupted or partially lost\n      console.warn(\"Realm app hydration failed:\", err instanceof Error ? err.message : err);\n    }\n  }\n\n  /**\n   * Switch user.\n   * @param nextUser The user or id of the user to switch to.\n   */\n  public switchUser(nextUser: User<FunctionsFactoryType, CustomDataType>): void {\n    const index = this.users.findIndex((u) => u === nextUser);\n    if (index === -1) {\n      throw new Error(\"The user was never logged into this app\");\n    }\n    // Remove the user from the stack\n    const [user] = this.users.splice(index, 1);\n    // Insert the user in the beginning of the stack\n    this.users.unshift(user);\n  }\n\n  /**\n   * Log in a user.\n   * @param credentials Credentials to use when logging in.\n   * @param fetchProfile Should the users profile be fetched? (default: true)\n   * @returns A promise resolving to the newly logged in user.\n   */\n  public async logIn(\n    credentials: Credentials,\n    fetchProfile = true,\n  ): Promise<User<FunctionsFactoryType, CustomDataType>> {\n    if (credentials.reuse) {\n      // TODO: Consider exposing providerName on \"User\" and match against that instead?\n      const existingUser = this.users.find((user) => user.providerType === credentials.providerType);\n      if (existingUser) {\n        this.switchUser(existingUser);\n        // If needed, fetch and set the profile on the user\n        if (fetchProfile) {\n          await existingUser.refreshProfile();\n        }\n        return existingUser;\n      }\n    }\n    const response = await this.authenticator.authenticate(credentials);\n    const user = this.createOrUpdateUser(response, credentials.providerType);\n    // Let's ensure this will be the current user, in case the user object was reused.\n    this.switchUser(user);\n    // If needed, fetch and set the profile on the user\n    if (fetchProfile) {\n      await user.refreshProfile();\n    }\n    // Persist the user id in the storage,\n    // merging to avoid overriding logins from other apps using the same underlying storage\n    this.storage.setUserIds(\n      this.users.map((u) => u.id),\n      true,\n    );\n    // Read out and store the device id from the server\n    const deviceId = response.deviceId;\n    if (deviceId && deviceId !== \"000000000000000000000000\") {\n      this.storage.set(DEVICE_ID_STORAGE_KEY, deviceId);\n    }\n    // Return the user\n    return user;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public async removeUser(user: User<FunctionsFactoryType, CustomDataType>): Promise<void> {\n    // Remove the user from the list of users\n    const index = this.users.findIndex((u) => u === user);\n    if (index === -1) {\n      throw new Error(\"The user was never logged into this app\");\n    }\n    this.users.splice(index, 1);\n    // Log out the user - this removes access and refresh tokens from storage\n    await user.logOut();\n    // Remove the users profile from storage\n    this.storage.remove(`user(${user.id}):profile`);\n    // Remove the user from the storage\n    this.storage.removeUserId(user.id);\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public async deleteUser(user: User<FunctionsFactoryType, CustomDataType>): Promise<void> {\n    await this.fetcher.fetchJSON({\n      method: \"DELETE\",\n      path: routes.api().auth().delete().path,\n    });\n    await this.removeUser(user);\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public addListener(): void {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public removeListener(): void {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public removeAllListeners(): void {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  /**\n   * The currently active user (or null if no active users exists).\n   * @returns the currently active user or null.\n   */\n  public get currentUser(): User<FunctionsFactoryType, CustomDataType> | null {\n    const activeUsers = this.users.filter((user) => user.state === UserState.Active);\n    if (activeUsers.length === 0) {\n      return null;\n    } else {\n      // Current user is the top of the stack\n      return activeUsers[0];\n    }\n  }\n\n  /**\n   * All active and logged-out users:\n   * - First in the list are active users (ordered by most recent call to switchUser or login)\n   * - Followed by logged out users (also ordered by most recent call to switchUser or login).\n   * @returns An array of users active or logged out users (current user being the first).\n   */\n  public get allUsers(): Readonly<Record<string, User<FunctionsFactoryType, CustomDataType>>> {\n    // Returning a freezed copy of the list of users to prevent outside changes\n    return Object.fromEntries(this.users.map((user) => [user.id, user]));\n  }\n\n  /**\n   * @returns A promise of the app URL, with the app location resolved.\n   */\n  public get locationUrl(): Promise<string> {\n    if (!this._locationUrl) {\n      const path = routes.api().app(this.id).location().path;\n      this._locationUrl = this.fetcher\n        .fetchJSON({\n          method: \"GET\",\n          url: this.baseUrl + path,\n          tokenType: \"none\",\n        })\n        .then((body) => {\n          if (typeof body !== \"object\") {\n            throw new Error(\"Expected response body be an object\");\n          } else {\n            return body as Record<string, unknown>;\n          }\n        })\n        .then(({ hostname }) => {\n          if (typeof hostname !== \"string\") {\n            throw new Error(\"Expected response to contain a 'hostname'\");\n          } else {\n            return hostname;\n          }\n        })\n        .catch((err) => {\n          // Reset the location to allow another request to fetch again.\n          this._locationUrl = null;\n          throw err;\n        });\n    }\n    return this._locationUrl;\n  }\n\n  /**\n   * @returns Information about the current device, sent to the server when authenticating.\n   */\n  public get deviceInformation(): DeviceInformation {\n    const deviceIdStr = this.storage.getDeviceId();\n    const deviceId =\n      typeof deviceIdStr === \"string\" && deviceIdStr !== \"000000000000000000000000\"\n        ? new ObjectId(deviceIdStr)\n        : undefined;\n    return new DeviceInformation({\n      appId: this.localApp ? this.localApp.name : undefined,\n      appVersion: this.localApp ? this.localApp.version : undefined,\n      deviceId,\n    });\n  }\n\n  /**\n   * Create (and store) a new user or update an existing user's access and refresh tokens.\n   * This helps de-duplicating users in the list of users known to the app.\n   * @param response A response from the Authenticator.\n   * @param providerType The type of the authentication provider used.\n   * @returns A new or an existing user.\n   */\n  private createOrUpdateUser(\n    response: AuthResponse,\n    providerType: ProviderType,\n  ): User<FunctionsFactoryType, CustomDataType> {\n    const existingUser = this.users.find((u) => u.id === response.userId);\n    if (existingUser) {\n      // Update the users access and refresh tokens\n      existingUser.accessToken = response.accessToken;\n      existingUser.refreshToken = response.refreshToken;\n      return existingUser;\n    } else {\n      // Create and store a new user\n      if (!response.refreshToken) {\n        throw new Error(\"No refresh token in response from server\");\n      }\n      const user = new User<FunctionsFactoryType, CustomDataType>({\n        app: this,\n        id: response.userId,\n        accessToken: response.accessToken,\n        refreshToken: response.refreshToken,\n        providerType,\n      });\n      this.users.unshift(user);\n      return user;\n    }\n  }\n\n  /**\n   * Restores the state of the app (active and logged-out users) from the storage\n   */\n  private hydrate() {\n    const userIds = this.storage.getUserIds();\n    this.users = userIds.map((id) => new User<FunctionsFactoryType, CustomDataType>({ app: this, id }));\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nexport * as BSON from \"bson\";\n\nimport { App } from \"./App\";\n\n/**\n * Get or create a singleton Realm App from an id.\n * Calling this function multiple times with the same id will return the same instance.\n * @param id The Realm App id visible from the Atlas App Services UI or a configuration.\n * @returns The Realm App instance.\n */\nexport function getApp(id: string): App {\n  return App.getApp(id);\n}\n\nexport * from \"./App\";\nexport * from \"./Credentials\";\nexport * from \"./User\";\nexport { MongoDBRealmError } from \"./MongoDBRealmError\";\nexport { getEnvironment, setEnvironment } from \"./environment\";\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Check whether the user's app is running in \"development mode\" (e.g. `npm run dev`\n * for a React app, or `NODE_ENV=development` for a Node app). Each platform's entry\n * point should define the value of this using `setIsDevelopmentMode`.\n * The default behaviour is to always return `false`.\n *\n * @returns true if the user's app is running in development mode, false otherwise\n */\nlet isDevelopmentMode = false;\n/**\n * Set the value of `isDevelopmentMode`. This allows each entry point (node vs DOM)\n * to use its own method for determining whether we are in development mode.\n *\n * @param state A boolean indicating whether the user's app is running in\n * development mode or not.\n */\nconst setIsDevelopmentMode = (state) => {\n    isDevelopmentMode = state;\n};\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Display a deprecation warning for features being removed in the next major version\n * to users in development mode (as best as we can detect this, see `isDevelopmentMode`)\n *\n * @param deprecatedItem The method signature or name of the deprecated item\n * @param suggestedReplacement The method signature or name of the suggested replacement\n */\nconst deprecationWarning = (deprecatedItem, suggestedReplacement) => {\n    if (!isDevelopmentMode)\n        return;\n    console.warn(`Deprecation warning from Realm: ${deprecatedItem} is deprecated and will be removed in a future major release. Consider switching to ${suggestedReplacement}.`);\n};\n/**\n * Helper function for migrating from positional arguments to a single dictionary argument.\n * Check the arguments passed to a function, if the first argument is not an object (i.e. it\n * is presumed to be a deprecated positional-style call), shows a deprecation warning and\n * converts the positional arguments into an object matching the expected \"new\" shape.\n *\n * @param args Array of arguments passed to the function (captured with `...args`).\n * @param methodName The name of the method, used to show the deprecation warning.\n * @param argNames The list of positional argument names, used to covert them into\n * an object if a deprecated call is made and to show the deprecation warning.\n * @param hasRestArgs Optional flag indicating that the function's final argument is\n * `...args` (to capture any extra arguments), in which case we capture them and return\n * as the second element of the return array.\n *\n * @returns An object containing:\n *\n * argsObject: a dictionary of function arguments, either passed through from args[0] if\n * args[0] is an object, or created from `args` and `argNames` if the args are a\n * deprecated positional argument call.\n *\n * restArgs: an array of the \"...args\" passed to the function if `hasRestArgs` is true;\n * otherwise it is `undefined`.\n */\n// Allow use of `object` type\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst handleDeprecatedPositionalArgs = (args, methodName, argNames, hasRestArgs) => {\n    if (typeof args[0] !== \"object\") {\n        const restArgsText = hasRestArgs ? \", ...args\" : \"\";\n        deprecationWarning(`${methodName}(${argNames.join(\", \")}${restArgsText})`, `${methodName}({ ${argNames.join(\", \")} }${restArgsText})`);\n        // Convert the array of arguments into a dictionary keyed by the relevant argName\n        const argsObject = argNames.reduce((prev, argName, index) => {\n            return { ...prev, [argName]: args[index] };\n        }, {});\n        const restArgs = hasRestArgs ? args.slice(argNames.length) : undefined;\n        return { argsObject, restArgs };\n    }\n    return { argsObject: args[0], restArgs: hasRestArgs ? args.slice(1) : undefined };\n};\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Used to indicate that an object is a proxied Realm.Dictionary, to allow us\n// to correctly detect Dictionaries in toJSON when using JSC pre-v11 (#4674)\nconst IS_PROXIED_DICTIONARY = Symbol(\"IS_PROXIED_DICTIONARY\");\n\nvar symbols = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    IS_PROXIED_DICTIONARY: IS_PROXIED_DICTIONARY\n});\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Exports a globalThis which is polyfilled for iOS 11/12\n// From https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst check = function (it) {\n    return it && it.Math == Math && it;\n};\n// eslint-disable-next-line no-restricted-globals\nconst safeGlobalThis = \n// eslint-disable-next-line no-restricted-globals\ncheck(typeof globalThis == \"object\" && globalThis) ||\n    check(typeof window == \"object\" && window) ||\n    // eslint-disable-next-line no-restricted-globals -- safe\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore allow `self`\n    check(typeof self == \"object\" && self) ||\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore allow `global`\n    check(typeof global == \"object\" && global) ||\n    // eslint-disable-next-line no-new-func -- fallback\n    (function () {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore allow `this`\n        return this;\n    })() ||\n    Function(\"return this\")();\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// React/React Native set a global __DEV__ variable when running in dev mode\nsetIsDevelopmentMode(typeof __DEV__ !== \"undefined\" && __DEV__);\n\nexport { deprecationWarning, handleDeprecatedPositionalArgs, safeGlobalThis, symbols };\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { Storage, StorageChangeListener } from \"../storage/Storage\";\nimport { PrefixedStorage } from \"../storage/PrefixedStorage\";\nimport { safeGlobalThis } from \"@realm/common\";\n\n/**\n * In-memory storage that will not be persisted.\n */\nexport class LocalStorage implements Storage {\n  /**\n   * Internal state of the storage.\n   */\n  // eslint-disable-next-line no-restricted-globals\n  private readonly global: typeof globalThis;\n\n  /**\n   * Constructs a LocalStorage using the global window.\n   */\n  constructor() {\n    if (typeof safeGlobalThis.localStorage === \"object\") {\n      this.global = safeGlobalThis;\n    } else {\n      throw new Error(\"Cannot use LocalStorage without a global localStorage object\");\n    }\n  }\n\n  /** @inheritdoc */\n  public get(key: string): string | null {\n    return this.global.localStorage.getItem(key);\n  }\n\n  /** @inheritdoc */\n  public set(key: string, value: string): void {\n    return this.global.localStorage.setItem(key, value);\n  }\n\n  /** @inheritdoc */\n  public remove(key: string): void {\n    return this.global.localStorage.removeItem(key);\n  }\n\n  /** @inheritdoc */\n  public prefix(keyPart: string): Storage {\n    return new PrefixedStorage(this, keyPart);\n  }\n\n  /** @inheritdoc */\n  public clear(prefix?: string): void {\n    const keys = [];\n    // Iterate all keys to find the once have a matching prefix.\n    for (let i = 0; i < this.global.localStorage.length; i++) {\n      const key = this.global.localStorage.key(i);\n      if (key && (!prefix || key.startsWith(prefix))) {\n        keys.push(key);\n      }\n    }\n    // Remove the items in a seperate loop to avoid updating while iterating.\n    for (const key of keys) {\n      this.global.localStorage.removeItem(key);\n    }\n  }\n\n  /** @inheritdoc */\n  public addListener(listener: StorageChangeListener): void {\n    return this.global.addEventListener(\"storage\", listener);\n  }\n\n  /** @inheritdoc */\n  public removeListener(listener: StorageChangeListener): void {\n    return this.global.removeEventListener(\"storage\", listener);\n  }\n}\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nimport { detect } from \"detect-browser\";\n\ndeclare global {\n  type TimerHandle = ReturnType<typeof setTimeout>;\n}\n\nexport * from \"../index\";\n\nimport { setEnvironment, Environment } from \"../environment\";\nimport { MemoryStorage } from \"../storage/MemoryStorage\";\nimport { OAuth2Helper } from \"../OAuth2Helper\";\n\nimport { LocalStorage } from \"./LocalStorage\";\nimport { safeGlobalThis } from \"@realm/common\";\nexport { LocalStorage };\n\nconst browser = detect();\n\nconst DefaultStorage = \"localStorage\" in safeGlobalThis ? LocalStorage : MemoryStorage;\n\n/**\n * Attempt to use the browser to open a window\n * @param url The url to open a window to.\n * @returns Then newly create window.\n */\nfunction openWindow(url: string) {\n  if (typeof safeGlobalThis.open === \"function\") {\n    return safeGlobalThis.open(url);\n  } else {\n    console.log(`Please open ${url}`);\n    return null;\n  }\n}\n\nconst environment: Environment = {\n  defaultStorage: new DefaultStorage().prefix(\"realm-web\"),\n  openWindow,\n  platform: browser?.name || \"web\",\n  platformVersion: browser?.version || \"0.0.0\",\n  TextDecoder,\n};\n\nsetEnvironment(environment);\n\n/**\n * Handle an OAuth 2.0 redirect.\n * @param location An optional location to use (defaults to the windows current location).\n * @param storage Optional storage used to save any results from the location.\n */\nexport function handleAuthRedirect(location = safeGlobalThis.location, storage = environment.defaultStorage): void {\n  try {\n    const queryString = location.hash.substr(1); // Strip the initial # from the hash\n    OAuth2Helper.handleRedirect(queryString, storage);\n  } catch (err) {\n    // Ensure calling this never throws: It should not interrupt a users flow.\n    console.warn(err);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}